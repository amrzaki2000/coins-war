.model Compact
.stack 64

.data

	lives1            dw  '3'
	lives2            dw  '3'
	msglives          db  3,'$'
	PLayer1Health     dw  100
	PLayer2Health     dw  310
	msg1              db  'PLayer1$'
	msg2              db  'PLayer2$'

	;;;Dina;;;
	msg3              db  'Score:$'
	round             db  'Round 1','$'
	score1            dw  0
	score2            dw  0

	eW                equ 50
	eH                equ 50
	e                 DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 18, 18, 18, 224, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 151, 148, 148, 148, 145, 144, 144, 18
	                  DB  18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 246, 150
	                  DB  150, 150, 148, 54, 54, 54, 148, 146, 143, 142, 142, 142, 143, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 18, 18, 246, 245, 150, 54, 54, 54, 3, 3, 3, 3, 54, 148, 10, 10, 10, 10, 167, 238, 238, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 142, 10, 10, 10, 10, 10, 164, 239, 18, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 3, 54, 3, 146, 3, 3, 3, 3, 3, 3, 3, 3, 148, 10
	                  DB  10, 10, 10, 10, 10, 164, 237, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 245, 149, 3, 3, 3, 3, 148
	                  DB  3, 3, 3, 3, 3, 3, 3, 54, 3, 143, 10, 10, 10, 10, 10, 10, 143, 239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 18, 246, 150, 54, 3, 3, 3, 3, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 146, 146, 144, 10, 10, 10, 143, 146, 146, 246, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 150, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 143, 144, 144, 144, 148, 54, 148, 224
	                  DB  18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 149, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 54, 54, 148, 247, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 148, 54, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 54, 3, 3, 3, 3, 3, 3, 54, 54, 54, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19
	                  DB  244, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 148, 3, 3, 3, 3, 3, 3, 54, 54, 54, 150, 246, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 143, 143, 148, 54, 3, 3, 3, 3, 54, 54, 54
	                  DB  54, 151, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 145, 168, 10
	                  DB  143, 148, 54, 3, 3, 3, 3, 54, 54, 54, 54, 244, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 147, 143, 10, 143, 148, 54, 3, 3, 3, 54, 54, 54, 54, 54, 244, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240, 144
	                  DB  148, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 147, 147, 147, 3, 3, 3, 3, 3, 54, 54, 54, 54, 54, 149, 244, 18, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 18, 239, 143, 143, 143, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 54, 54, 3, 3, 3, 3, 3, 3, 3, 54, 54
	                  DB  54, 79, 149, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 10, 142, 148, 54, 3, 3, 3, 54, 54, 54, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 146, 143, 3, 54, 54, 54, 78, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 10, 142, 148, 54, 3, 54, 148, 147, 147, 147
	                  DB  147, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 3, 147, 144, 144, 146, 148, 148, 79, 78, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10
	                  DB  10, 147, 148, 54, 3, 148, 145, 143, 143, 143, 143, 3, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 143, 10, 10, 10, 142, 143, 3, 78, 148, 18, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 143, 148, 3, 3, 3, 144, 143, 143, 143, 143, 143, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 143, 143, 10, 10, 10, 10, 143
	                  DB  143, 3, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 236, 10, 143, 145, 145, 145, 145, 144, 144, 10, 10, 164, 143, 144, 148, 54, 3, 3, 3, 3, 3, 3
	                  DB  3, 54, 148, 144, 143, 164, 10, 10, 10, 164, 143, 145, 144, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 238, 143, 144, 144, 144, 144, 143, 10, 10, 10, 10, 10
	                  DB  143, 143, 148, 54, 3, 3, 3, 3, 54, 54, 54, 54, 148, 144, 143, 164, 10, 10, 10, 10, 10, 143, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240
	                  DB  142, 10, 10, 10, 10, 10, 10, 10, 164, 10, 143, 147, 148, 3, 3, 3, 3, 54, 54, 54, 54, 54, 3, 147, 143, 164, 10, 10, 10, 10, 10, 236, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 239, 164, 10, 10, 10, 10, 10, 10, 10, 10, 144, 143, 3, 54, 3, 3, 3, 54, 54, 54, 54, 54, 54, 54, 3, 143, 164, 10, 10, 10, 10
	                  DB  10, 236, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 239, 164, 10, 10, 10, 10, 10, 10, 10, 10, 144, 143, 148, 54, 3, 3, 54, 54, 54, 54, 54
	                  DB  54, 54, 54, 3, 10, 10, 10, 10, 10, 10, 10, 236, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240, 237, 165, 10, 10, 10, 10, 10, 10, 143, 143
	                  DB  143, 148, 54, 54, 54, 54, 54, 54, 54, 3, 147, 147, 147, 169, 10, 10, 10, 10, 10, 164, 143, 239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18
	                  DB  18, 166, 10, 10, 10, 10, 10, 143, 144, 143, 148, 3, 54, 54, 54, 54, 54, 54, 54, 3, 145, 144, 143, 10, 10, 10, 10, 10, 10, 164, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 167, 164, 10, 10, 10, 10, 146, 146, 147, 54, 54, 54, 54, 54, 54, 54, 54, 54, 3, 145, 144, 10, 10, 10, 10, 10, 10, 164, 166
	                  DB  239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 142, 10, 143, 143, 3, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 3
	                  DB  145, 144, 10, 10, 10, 10, 10, 10, 166, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 238, 144, 143, 143, 3, 54, 54, 54
	                  DB  54, 54, 54, 54, 54, 54, 54, 79, 78, 78, 3, 3, 172, 143, 143, 143, 10, 143, 238, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 240, 144, 148, 3, 54, 54, 54, 54, 54, 54, 54, 54, 79, 79, 78, 78, 78, 78, 78, 3, 148, 3, 3, 145, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 54, 79, 79, 79, 79, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 3, 244, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 3, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78
	                  DB  78, 78, 78, 78, 3, 246, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 245, 244, 149, 78
	                  DB  78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 148, 245, 244, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 18, 18, 244, 148, 149, 149, 3, 78, 78, 78, 78, 78, 3, 149, 149, 148, 150, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 149, 3, 3, 3, 3, 3, 148, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 224, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


	p1W               equ 41
	p1H               equ 60
	p1                DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 0, 0, 0, 0, 0, 54, 53, 53, 53, 53, 53, 53, 53, 53, 54, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 21, 137, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54
	                  DB  0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 52, 52, 52, 52, 53, 53, 53, 53, 53, 52, 53, 53, 54, 137, 138, 138, 148, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 53
	                  DB  53, 54, 0, 0, 0, 0, 54, 53, 53, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 137, 12, 12, 137, 0, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52
	                  DB  52, 53, 54, 0, 0, 0, 0, 54, 53, 52, 52, 52, 52, 52, 53, 53, 16, 16, 16, 16, 16, 16, 16, 124, 53, 148, 138, 138, 137, 0, 16, 16, 16, 16, 3, 125, 3, 53, 52, 52
	                  DB  52, 52, 53, 53, 54, 0, 0, 0, 54, 53, 52, 52, 52, 53, 53, 53, 137, 209, 184, 135, 128, 128, 128, 1, 199, 3, 53, 21, 20, 0, 16, 199, 128, 151, 3, 54, 199, 197, 53, 53
	                  DB  53, 53, 52, 52, 53, 54, 53, 0, 0, 54, 53, 52, 52, 52, 53, 53, 22, 137, 233, 17, 208, 132, 9, 9, 9, 54, 54, 53, 3, 20, 16, 16, 200, 55, 54, 23, 9, 200, 16, 53
	                  DB  53, 3, 53, 53, 52, 52, 53, 53, 0, 0, 54, 53, 53, 52, 52, 52, 53, 3, 160, 138, 137, 17, 183, 137, 43, 70, 3, 126, 198, 198, 0, 16, 188, 164, 54, 3, 70, 43, 188, 17
	                  DB  137, 137, 137, 54, 53, 52, 52, 53, 53, 0, 0, 0, 54, 53, 52, 52, 52, 53, 53, 21, 138, 12, 233, 184, 135, 172, 53, 54, 199, 16, 16, 16, 16, 198, 54, 9, 156, 9, 223, 17
	                  DB  137, 137, 137, 160, 53, 53, 52, 52, 53, 53, 0, 0, 0, 0, 53, 53, 53, 52, 52, 53, 53, 137, 137, 185, 186, 196, 54, 3, 237, 16, 16, 16, 186, 186, 186, 220, 148, 133, 128, 199
	                  DB  16, 137, 137, 21, 53, 53, 52, 52, 53, 53, 53, 0, 0, 0, 0, 0, 135, 175, 3, 53, 53, 53, 16, 185, 115, 24, 53, 26, 43, 42, 187, 16, 16, 187, 42, 42, 43, 172, 220, 187
	                  DB  185, 16, 0, 173, 53, 53, 53, 53, 53, 53, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 0, 0, 0, 126, 147, 23, 124, 24, 6, 42, 43, 6, 185, 186, 114, 6, 42, 6, 140, 23
	                  DB  24, 18, 16, 16, 52, 53, 53, 0, 0, 0, 0, 0, 0, 0, 0, 136, 21, 54, 53, 0, 0, 137, 114, 53, 53, 53, 23, 6, 42, 6, 115, 42, 6, 115, 6, 43, 43, 42, 115, 115
	                  DB  115, 125, 17, 16, 197, 53, 53, 53, 0, 137, 137, 20, 0, 0, 0, 0, 53, 53, 53, 148, 137, 137, 137, 3, 53, 3, 168, 42, 6, 42, 42, 6, 114, 17, 6, 43, 43, 43, 42, 43
	                  DB  42, 6, 17, 125, 125, 3, 53, 53, 0, 20, 138, 139, 138, 20, 0, 0, 0, 53, 3, 160, 138, 139, 138, 114, 53, 53, 124, 185, 114, 6, 42, 43, 42, 6, 17, 6, 43, 43, 42, 187
	                  DB  115, 42, 42, 148, 53, 53, 3, 137, 137, 0, 20, 138, 12, 12, 138, 137, 0, 0, 137, 138, 12, 12, 12, 12, 138, 173, 53, 53, 16, 186, 42, 43, 42, 43, 42, 187, 6, 43, 43, 42
	                  DB  6, 6, 236, 148, 53, 53, 53, 148, 137, 137, 20, 138, 12, 12, 12, 161, 138, 0, 0, 20, 138, 12, 12, 12, 12, 161, 137, 3, 53, 16, 186, 42, 43, 43, 42, 114, 6, 42, 42, 42
	                  DB  42, 42, 140, 148, 126, 125, 53, 20, 245, 137, 137, 137, 138, 12, 12, 12, 138, 137, 0, 0, 20, 138, 12, 12, 12, 12, 161, 138, 137, 137, 16, 186, 42, 43, 43, 42, 186, 6, 42, 42
	                  DB  43, 43, 42, 43, 6, 18, 16, 163, 138, 138, 137, 53, 3, 137, 6, 12, 138, 137, 137, 0, 0, 20, 137, 138, 12, 12, 12, 138, 137, 137, 138, 16, 186, 42, 43, 43, 42, 186, 6, 42
	                  DB  42, 42, 42, 43, 42, 186, 16, 21, 137, 12, 138, 137, 53, 53, 53, 138, 138, 138, 137, 0, 0, 0, 0, 0, 137, 160, 22, 161, 137, 161, 137, 160, 16, 186, 42, 42, 43, 42, 186, 6
	                  DB  42, 43, 6, 187, 43, 6, 185, 16, 24, 137, 12, 139, 137, 52, 53, 53, 53, 0, 112, 0, 0, 0, 0, 0, 0, 21, 148, 3, 53, 53, 0, 0, 0, 0, 16, 186, 42, 42, 42, 186
	                  DB  6, 43, 42, 115, 115, 42, 6, 17, 16, 42, 137, 139, 138, 138, 0, 53, 53, 53, 53, 53, 0, 0, 0, 0, 0, 53, 53, 53, 126, 125, 197, 16, 16, 16, 16, 16, 186, 115, 20, 22
	                  DB  128, 22, 24, 153, 152, 140, 114, 16, 125, 53, 53, 0, 137, 18, 16, 16, 197, 3, 3, 53, 53, 0, 0, 0, 0, 53, 53, 54, 221, 138, 164, 164, 209, 199, 199, 18, 162, 16, 199, 55
	                  DB  9, 9, 9, 9, 9, 9, 1, 16, 16, 54, 53, 53, 198, 16, 127, 127, 126, 3, 3, 161, 17, 16, 0, 0, 0, 0, 53, 3, 18, 23, 89, 91, 91, 138, 126, 55, 154, 90, 163, 177
	                  DB  55, 9, 9, 9, 9, 9, 9, 1, 16, 53, 53, 53, 125, 164, 23, 9, 56, 79, 53, 28, 26, 18, 16, 0, 0, 0, 0, 0, 16, 209, 27, 91, 90, 23, 128, 55, 56, 28, 91, 26
	                  DB  210, 163, 24, 164, 24, 20, 159, 24, 140, 115, 198, 54, 198, 17, 66, 91, 56, 152, 23, 28, 91, 90, 24, 18, 16, 0, 0, 0, 0, 16, 209, 26, 90, 90, 236, 199, 198, 22, 91, 27
	                  DB  236, 6, 42, 115, 42, 43, 42, 115, 6, 43, 42, 6, 185, 18, 25, 90, 90, 28, 21, 18, 164, 90, 91, 26, 18, 16, 0, 0, 0, 0, 16, 18, 210, 236, 26, 236, 125, 124, 242, 163
	                  DB  26, 187, 6, 137, 128, 226, 6, 42, 42, 6, 115, 43, 42, 6, 210, 26, 90, 90, 163, 163, 26, 24, 164, 26, 20, 17, 16, 0, 0, 0, 137, 138, 17, 16, 17, 18, 17, 125, 53, 53
	                  DB  222, 211, 42, 140, 9, 55, 55, 223, 6, 42, 42, 42, 43, 42, 227, 1, 128, 26, 90, 21, 17, 164, 89, 23, 209, 17, 16, 0, 0, 0, 0, 137, 137, 137, 164, 53, 125, 209, 138, 160
	                  DB  3, 124, 186, 42, 9, 9, 55, 55, 55, 127, 115, 42, 43, 43, 140, 9, 55, 55, 223, 25, 20, 16, 17, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 137, 160, 3, 53, 3, 138, 12
	                  DB  139, 160, 199, 186, 42, 9, 128, 226, 234, 235, 128, 127, 187, 42, 43, 42, 22, 9, 9, 55, 105, 17, 16, 53, 54, 54, 0, 137, 20, 20, 0, 0, 0, 0, 0, 53, 53, 54, 137, 12
	                  DB  12, 139, 160, 16, 187, 42, 128, 21, 66, 90, 90, 24, 20, 18, 186, 42, 42, 6, 23, 9, 9, 55, 199, 18, 3, 53, 53, 148, 138, 138, 138, 137, 0, 0, 0, 0, 53, 53, 3, 137
	                  DB  12, 12, 139, 137, 16, 186, 6, 162, 24, 24, 24, 24, 24, 27, 26, 21, 139, 115, 114, 6, 23, 24, 18, 16, 138, 137, 148, 53, 20, 138, 12, 161, 137, 0, 0, 0, 137, 137, 136, 210
	                  DB  137, 6, 139, 138, 137, 0, 16, 232, 138, 18, 20, 163, 162, 163, 164, 23, 25, 89, 163, 115, 115, 115, 115, 186, 16, 65, 137, 137, 0, 20, 138, 139, 138, 137, 0, 0, 0, 137, 137, 137
	                  DB  0, 0, 137, 160, 137, 0, 0, 0, 16, 17, 23, 89, 24, 162, 27, 26, 23, 164, 162, 163, 164, 115, 185, 16, 16, 0, 0, 0, 0, 137, 0, 137, 137, 137, 0, 0, 0, 0, 137, 137
	                  DB  137, 137, 0, 0, 0, 0, 0, 0, 16, 209, 25, 90, 90, 25, 24, 66, 90, 90, 89, 162, 18, 235, 18, 128, 150, 150, 151, 0, 0, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  137, 137, 137, 0, 151, 0, 0, 151, 150, 16, 233, 90, 90, 163, 25, 30, 30, 24, 23, 91, 89, 26, 24, 151, 54, 79, 78, 9, 150, 1, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 137, 137, 137, 0, 151, 151, 128, 151, 151, 151, 174, 89, 90, 26, 21, 26, 29, 22, 162, 27, 24, 90, 27, 173, 54, 53, 54, 79, 9, 151, 150, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 151, 150, 150, 128, 151, 9, 79, 24, 27, 90, 89, 162, 235, 24, 89, 26, 151, 24, 27, 172, 54, 54, 54, 149, 150, 151, 151, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 79, 79, 149, 149, 54, 78, 54, 172, 27, 89, 89, 89, 89, 26, 150, 149, 54, 172, 78, 78, 54, 54, 148, 150, 151, 151, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 151, 54, 79, 53, 54, 150, 54, 78, 78, 56, 173, 26, 27, 24, 54, 54, 54, 54, 149, 79, 54, 54, 78, 77, 56, 128, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 151, 149, 54, 54, 149, 54, 54, 78, 77, 77, 79, 150, 54, 54, 54, 54, 54, 150, 149, 54, 54, 54, 78, 79, 173, 128, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 172, 148, 54, 54, 54, 9, 54, 54, 53, 77, 77, 79, 54, 54, 54, 54, 9, 54, 54, 9, 54, 54, 53, 77, 79, 128, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 56, 79, 54, 54, 54, 78, 9, 54, 54, 53, 77, 77, 78, 53, 54, 54, 54, 54, 53, 78, 173, 149, 54, 53, 9, 151, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 9, 9, 54, 54, 54, 53, 54, 54, 149, 54, 78, 77, 78, 54, 54, 54, 78, 77, 77, 173, 149, 54, 54, 54, 151, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 151, 150, 54, 54, 54, 54, 54, 150, 54, 54, 78, 77, 53, 54, 78, 77, 77, 77, 173, 54, 149, 150, 150, 151
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 9, 78, 54, 54, 54, 78, 54, 54, 54, 78, 77, 77, 78, 77, 77, 77, 77, 173, 54, 149, 151, 151
	                  DB  151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 9, 77, 78, 54, 54, 78, 77, 53, 54, 53, 77, 77, 78, 9, 54, 78, 77, 173, 54, 149, 151
	                  DB  151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 150, 9, 77, 54, 148, 78, 77, 77, 9, 54, 53, 77, 77, 78, 149, 148, 78, 173, 54, 149
	                  DB  151, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 173, 78, 78, 149, 150, 79, 77, 77, 9, 149, 54, 78, 77, 78, 54, 149, 151, 54
	                  DB  149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 172, 79, 173, 128, 150, 79, 77, 79, 149, 151, 172, 78, 78, 77, 53, 149
	                  DB  54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 0, 0, 151, 56, 78, 56, 128, 151, 151, 149, 79, 77
	                  DB  53, 54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 0, 0, 0, 151, 151, 151, 0, 0, 0, 105, 150
	                  DB  79, 77, 54, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0
	                  DB  105, 151, 56, 54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0
	                  DB  0, 0, 0, 128, 149, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 128, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	p2W               equ 41
	p2H               equ 60
	p2                DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 18, 4, 184, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 186, 112, 184, 16, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 113, 188, 188, 16, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 112, 184, 16, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 114, 43, 116, 17, 16, 0, 0, 0, 0, 0, 16, 186, 114, 186, 16, 16, 0, 0, 0, 0, 0
	                  DB  16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 185, 4, 205, 17, 16, 0, 0, 0, 0, 0, 16, 114, 6, 113, 184, 16, 0, 0, 0, 0
	                  DB  0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 109, 130, 16, 16, 0, 0, 0, 0, 0, 16, 17, 228, 111, 184, 16, 0, 0, 0
	                  DB  0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 129, 9, 179, 16, 0, 0, 0, 0, 0, 0, 16, 107, 106, 16, 16, 0, 0
	                  DB  0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 129, 57, 149, 196, 16, 16, 0, 16, 16, 16, 198, 150, 200, 16, 16, 0
	                  DB  0, 0, 0, 16, 129, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 247, 79, 3, 124, 125, 196, 16, 115, 187, 198, 3, 53, 124, 198, 16
	                  DB  0, 0, 16, 16, 130, 131, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 197, 124, 3, 3, 3, 3, 124, 236, 6, 116, 148, 54, 3, 3, 124
	                  DB  198, 16, 16, 106, 131, 131, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 196, 3, 3, 54, 3, 3, 148, 140, 139, 140, 25, 148, 3, 3
	                  DB  3, 124, 18, 106, 34, 132, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 203, 196, 3, 54, 54, 54, 54, 24, 6, 22, 159, 6, 164, 3
	                  DB  54, 3, 3, 196, 179, 130, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 156, 156, 196, 3, 54, 54, 53, 53, 72, 6, 158, 64, 159, 6
	                  DB  73, 54, 54, 3, 196, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 58, 9, 128, 125, 3, 53, 53, 53, 72, 6, 207, 158, 22
	                  DB  6, 73, 53, 54, 125, 195, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 58, 57, 34, 105, 125, 53, 53, 53, 72, 6, 23, 23
	                  DB  20, 6, 73, 53, 125, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 156, 57, 57, 34, 105, 3, 53, 53, 72, 6, 23
	                  DB  28, 23, 6, 73, 3, 198, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 156, 57, 57, 57, 151, 3, 53, 72, 6
	                  DB  20, 23, 22, 6, 73, 126, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 156, 57, 58, 156, 126, 53, 72
	                  DB  6, 21, 24, 22, 6, 140, 128, 106, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 129, 156, 57, 151, 3
	                  DB  72, 6, 23, 27, 22, 43, 115, 107, 34, 178, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 129, 201
	                  DB  125, 73, 140, 154, 22, 20, 6, 116, 107, 107, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 16, 16
	                  DB  16, 197, 152, 132, 131, 131, 131, 20, 115, 140, 209, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 16, 0
	                  DB  0, 0, 16, 106, 34, 57, 57, 57, 129, 115, 42, 114, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 56, 131, 16
	                  DB  16, 16, 16, 129, 57, 34, 57, 28, 81, 27, 162, 186, 107, 105, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 20, 58, 57
	                  DB  107, 17, 16, 179, 34, 58, 81, 24, 21, 22, 162, 25, 20, 107, 34, 179, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 187, 43, 65
	                  DB  34, 25, 43, 137, 16, 107, 58, 26, 20, 245, 136, 4, 136, 25, 65, 12, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 203, 24
	                  DB  6, 177, 115, 66, 58, 130, 22, 78, 53, 148, 19, 111, 4, 136, 3, 28, 138, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 212, 43
	                  DB  6, 18, 16, 17, 153, 58, 81, 26, 21, 148, 148, 21, 21, 160, 148, 148, 26, 21, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 203, 57
	                  DB  26, 116, 16, 0, 16, 21, 28, 78, 3, 148, 24, 28, 28, 28, 27, 23, 148, 220, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 203, 57
	                  DB  58, 24, 17, 16, 0, 16, 17, 17, 17, 17, 22, 58, 57, 34, 129, 200, 17, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 177, 34, 57
	                  DB  57, 58, 156, 16, 16, 0, 16, 16, 16, 16, 16, 17, 114, 6, 136, 107, 34, 106, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 57
	                  DB  34, 57, 34, 131, 16, 0, 0, 0, 0, 0, 16, 16, 177, 178, 18, 155, 57, 58, 57, 129, 178, 177, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18
	                  DB  156, 34, 24, 202, 156, 201, 16, 0, 0, 0, 16, 17, 178, 106, 34, 34, 57, 58, 58, 58, 57, 57, 179, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  16, 17, 201, 131, 16, 226, 130, 16, 0, 0, 16, 17, 107, 34, 106, 106, 34, 57, 57, 57, 58, 58, 57, 201, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 16, 16, 16, 17, 16, 17, 17, 16, 0, 16, 178, 107, 34, 34, 106, 131, 57, 57, 156, 107, 34, 57, 203, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 16, 106, 34, 34, 131, 156, 57, 58, 164, 212, 201, 131, 34, 131, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 34, 34, 9, 58, 132, 160, 139, 129, 156, 34, 57, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 34, 34, 57, 58, 156, 129, 156, 57, 57, 57, 57, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 178, 107, 34, 34, 57, 58, 57, 57, 58, 34, 57, 58, 57, 202, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 106, 34, 34, 34, 57, 58, 58, 58, 57, 57, 58, 132, 178, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 156, 34, 34, 34, 34, 57, 58, 58, 58, 58, 57, 106, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 131, 131, 132, 57, 57, 57, 57, 58, 58, 57, 57, 57, 203, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 131, 203, 16, 201, 24, 57, 57, 57, 132, 130, 129, 34, 34, 156, 201, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 129, 156, 177, 106, 178, 130, 9, 106, 106, 177, 202, 18, 107, 34, 57, 227, 16, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 129, 9, 107, 34, 106, 130, 131, 16, 16, 16, 156, 130, 178, 34, 57, 227, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 201, 156, 57, 34, 34, 106, 130, 131, 16, 0, 16, 227, 131, 18, 107, 57, 227, 16, 16, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 34, 34, 34, 132, 131, 227, 16, 0, 0, 16, 156, 130, 178, 34, 156, 201, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 228, 57, 34, 34, 34, 57, 154, 16, 0, 0, 0, 16, 227, 155, 18, 106, 57, 228, 16
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 6, 66, 26, 34, 34, 156, 226, 16, 0, 0, 0, 0, 16, 156, 130, 107, 57, 227
	                  DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 188, 43, 43, 25, 34, 57, 131, 16, 0, 0, 0, 0, 0, 16, 227, 131, 34, 57
	                  DB  227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 189, 139, 57, 34, 57, 24, 202, 16, 0, 0, 0, 0, 0, 0, 16, 203, 9
	                  DB  58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 57, 34, 58, 131, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  155, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 57, 156, 201, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 201, 156, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 156, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 16, 200, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 156, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	fireball1W        equ 32
	fireball1H        equ 32
	fireball1         DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 16, 4, 158, 148, 148, 160, 4, 112, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 4, 54
	                  DB  54, 54, 54, 54, 54, 54, 54, 54, 54, 22, 173, 4, 111, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  54, 54, 54, 54, 54, 54, 149, 4, 4, 4, 4, 111, 0, 0, 0, 0, 0, 0, 0, 16, 159, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54
	                  DB  54, 54, 54, 53, 14, 0, 0, 0, 0, 0, 0, 4, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 112, 0
	                  DB  0, 0, 112, 148, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54, 161, 4, 0, 0, 0, 112, 54, 54, 52, 52, 52
	                  DB  52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 54, 4, 112, 0, 6, 0, 0, 0, 0, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  52, 52, 52, 52, 52, 52, 52, 54, 54, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54
	                  DB  112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54, 22, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 4, 54, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 54, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 54, 54
	                  DB  52, 52, 52, 52, 52, 52, 54, 54, 54, 154, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 3, 54, 54, 54, 54, 54, 53, 3, 112
	                  DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 4, 112, 112, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	fireball2W        equ 32
	fireball2H        equ 32
	fireball2         DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 57, 0, 0, 0, 0, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57
	                  DB  57, 57, 58, 58, 58, 57, 57, 57, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 57, 57, 58
	                  DB  81, 58, 58, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 57, 9, 9, 58, 58, 58, 81, 58, 58, 57, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 57, 57, 58, 58, 57, 57, 57, 9, 9, 9, 9, 57, 57, 58, 58, 58, 57, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 58, 58, 57, 57, 58, 58, 57, 57, 9, 9, 9, 9, 9, 9, 9, 57, 58, 58, 58, 58, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57
	                  DB  56, 9, 9, 9, 9, 9, 9, 9, 9, 58, 58, 58, 81, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB  9, 9, 9, 57, 81, 81, 58, 58, 0, 0, 0, 0, 0, 0, 58, 81, 58, 81, 81, 81, 58, 58, 57, 56, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 58, 58, 58, 81
	                  DB  0, 0, 0, 58, 81, 58, 58, 81, 81, 58, 58, 58, 58, 58, 57, 57, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 56, 57, 58, 58, 81, 0, 0, 58, 58, 81, 81, 81, 58
	                  DB  58, 58, 58, 58, 58, 57, 57, 57, 9, 9, 9, 9, 9, 9, 9, 56, 57, 9, 9, 9, 57, 58, 58, 81, 0, 0, 58, 58, 81, 81, 81, 58, 58, 58, 58, 58, 58, 58, 57, 57
	                  DB  9, 9, 9, 9, 9, 9, 9, 57, 57, 57, 9, 9, 57, 58, 81, 58, 0, 0, 58, 58, 58, 58, 58, 81, 58, 58, 58, 58, 58, 58, 58, 56, 9, 9, 9, 9, 9, 57, 57, 57
	                  DB  57, 57, 56, 9, 9, 58, 81, 58, 0, 0, 0, 0, 0, 0, 58, 81, 81, 81, 81, 58, 58, 58, 58, 57, 9, 9, 9, 9, 9, 57, 57, 57, 57, 57, 56, 9, 56, 58, 81, 81
	                  DB  0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57, 57, 56, 9, 9, 9, 57, 57, 57, 57, 9, 9, 9, 9, 57, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 58
	                  DB  81, 58, 58, 58, 58, 58, 58, 56, 9, 9, 9, 57, 57, 9, 9, 9, 9, 9, 9, 9, 57, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 58, 57, 57, 58, 58, 57
	                  DB  57, 56, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 58, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 58, 58, 58, 57, 9, 9, 9, 9, 9, 9
	                  DB  9, 9, 57, 57, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 58, 57, 57, 9, 9, 9, 9, 9, 9, 57, 58, 81, 58, 58, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 9, 9, 9, 9, 9, 58, 58, 58, 58, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 57, 57, 57, 58, 58, 58, 58, 58, 81, 81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 58, 81, 81
	                  DB  81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	coinW             equ 10
	coinH             equ 10
	coin              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 210, 211, 211, 210, 18, 0, 0, 0, 18, 139, 65, 66, 66, 65, 139, 18, 0, 0, 210, 65, 66, 43, 43, 66, 140, 187, 0
	                  DB  0, 211, 66, 43, 43, 43, 43, 42, 187, 0, 0, 211, 66, 43, 43, 43, 43, 42, 187, 0, 0, 210, 65, 66, 43, 43, 43, 140, 187, 0, 0, 18, 139, 140, 42, 42, 140, 139, 18, 0
	                  DB  0, 0, 18, 187, 187, 187, 187, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	healthW           equ 20
	healthH           equ 20
	health            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	speedW            equ 20
	speedH            equ 20
	speed             DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 14, 14, 44, 44, 14, 44, 14, 14, 44, 44, 44, 0, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 31, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 31, 31, 31, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 14, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 31, 31, 14, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	damageW           equ 20
	damageH           equ 20
	damage            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 31, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 41, 31, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 40, 31, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 40, 0, 0, 0
	                  DB  0, 0, 0, 41, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0




	earthx            dw  160D
	earthy            dw  150D
	player1x          dw  -60D
	player1y          dw  300D
	player2y          dw  300D
	player2x          dw  215D
	fireball1x        dw  ?
	fireball1y        dw  ?
	fireball2x        dw  ?
	fireball2y        dw  ?
	coinx             dw  050d,0100d,120d,0150d,0200d,230d,260d,0290d
	coiny             dw  1d,1d,1d,1d,1d,1d,1d,1d
	coinsx1           dw  ?
	coinsy1           dw  ?
	coinsize          dw  8
	coinspeed         dw  3
	variable1         dw  0ADh
	xplayer1velocity  dw  7
	yplayer1velocity  dw  7
	xplayer2velocity  dw  7
	yplayer2velocity  dw  7
	fireball1velocity dw  15
	fireball2velocity dw  15


	input             db  ?
	input2            db  ?
	nomove            equ 0AAh
	updirection       equ 0ABh
	downdirection     equ 0ACh
	rightdirection    equ 0ADh
	leftdirection     equ 0AEh
	fireball          equ 0AFH
	isfiring          db  0
	isfiring2         db  0
	p1hit             db  0
	p2hit             db  0
	arrowup           equ 4800h
	arrowdown         equ 5000h
	arrowright        equ 4D00h
	arrowleft         equ 4B00h
	Wkey              equ 1177h
	Akey              equ 1E61h
	Skey              equ 1f73h
	Dkey              equ 2064h
	spacekey          equ 3920h
	enterkey          equ 1C0Dh

	;variables used in the game timer
	seconds           db  99
	timer             dw  10
	gameovermsg       db  'Game Over Time Limit Reached The Game is a DRAW$'
	player1winsmsg    db  'Player 1 is the WINNER !$'
	player2winsmsg    db  'Player 2 is the WINNER !$'

	;variables used in the main menu
	menu              db  "Welcome To Coins War",13,10
	                  db  "1. Play",13,10
	                  db  "2. Chat",13,10
	                  db  "3. Exit",13,10,'$'
	chatmes           db  "Welcome to the chat !","$"
	playmes           db  "Play now","$"


.code
Main proc Far


	                        mov  ax,@data
	                        mov  ds,ax
	                        
	;initialize the main menu
	;Clear screen
	                        mov  ah, 0
	                        mov  al, 3
	                        int  10H
	;Display messages
	                        mov  dx, offset menu
	                        mov  ah, 9
	                        int  21h

	;WAIT FOR ANY KEY.
	waitforkey:             mov  ah, 01
	                        int  16h
	                        JZ   waitforkey
	                        mov  ah,0
	                        int  16h
	;compare to available options
	                        cmp  ah,4
	                        jz   endgame
	                        cmp  ah,3
	                        jz   CHAT
	                        cmp  ah,2
	                        jz   PLAY
	                        jmp  endgame
	CHAT:                   mov  dx ,offset chatmes
	                        mov  ah,9
	                        int  21h
	                        jmp  endgame
                                
	PLAY:                   mov  ah,0
	                        mov  al,13h
	                        mov  bh,0
	                        int  10h

	maingameloop:           
                               
	;///////////////////////////////
	                        call drawBack
	                        call DrawPlayer1
	                        call DrawPlayer2
	                        call Draweachcoin
	                        call FirstHealthBar
	                        call SeconedHealthBar
	                        call Text
	                        call Drawfireball
	                        call Drawfireball2
	                        call getinput
	                        call delay
	                        call clearobjects
	                        call cleareachcoin
	                        call updateobjects
	                        call updatecoins
	;///////////////////////////////////////////
	timeloop:               
	;GET SYSTEM TIME.
	                        mov  ah, 2ch
	                        int  21h                     	;RETURN SECONDS IN DH.
	;CHECK IF ONE SECOND HAS PASSED.
	                        cmp  dh, seconds
	                        je   LOOPTOGAME
	;if there is no change in the time then loop again
	;if there is change then decrease the timer by 1
	                        mov  seconds, dh
	                        sub  timer,1d
	                        jz   EXITGAME
	; if the timer is 0 then exit
	                        mov  ax,timer
	                        call printax
	                        mov  ah,2
	                        mov  dl,' '
	                        int  21h
                                
	;/////////////////////////////////////
	LOOPTOGAME:             jmp  maingameloop

	EXITGAME:               call terminateandgetwinner


	endgame:                mov  ax, 4c00h
	                        int  21h
Main ENDP


	;draws first player health
FirstHealthBar PROC
	                        mov  cx,10                   	;Column
	                        mov  dx,150                  	;Row
	                        mov  al,0fh                  	;Pixel color
	                        mov  ah,0ch                  	;Draw Pixel Command
	first1:                 int  10h
	                        inc  cx
	                        cmp  cx,100
	                        jnz  first1
	                        mov  cx,10                   	;Column
	                        mov  dx,154                  	;Row
	first2:                 int  10h
	                        inc  cx
	                        cmp  cx,100
	                        jnz  first2
	                        mov  cx,10                   	;Column
	                        mov  dx,150                  	;Row
	first3:                 int  10h
	                        inc  dx
	                        cmp  dx,154
	                        jnz  first3
	                        mov  cx,100                  	;Column
	                        mov  dx,150
	first4:                 int  10h
	                        inc  dx
	                        cmp  dx,155
	                        jnz  first4
	                        mov  cx,11                   	;Column
	                        mov  dx,151                  	;Row
	                        mov  al,04h                  	;Pixel color
	first5:                 
	                        int  10h
	                        inc  dx
	                        int  10h
	                        inc  dx
	                        int  10h
	                        mov  dx,151
	                        inc  cx
	                        cmp  cx,PLayer1Health
	                        jnz  first5
	                        ret
FirstHealthBar ENDP

	;draws seconed player health
SeconedHealthBar PROC
	                        mov  cx,220                  	;Column
	                        mov  dx,150                  	;Row
	                        mov  al,0fh                  	;Pixel color
	                        mov  ah,0ch                  	;Draw Pixel Command
	seconed1:               int  10h
	                        inc  cx
	                        cmp  cx,310
	                        jnz  seconed1
	                        mov  cx,220                  	;Column
	                        mov  dx,154                  	;Row
	seconed2:               int  10h
	                        inc  cx
	                        cmp  cx,310
	                        jnz  seconed2
	                        mov  cx,220                  	;Column
	                        mov  dx,150                  	;Row
	seconed3:               int  10h
	                        inc  dx
	                        cmp  dx,154
	                        jnz  seconed3
	                        mov  cx,310                  	;Column
	                        mov  dx,150
	seconed4:               int  10h
	                        inc  dx
	                        cmp  dx,155
	                        jnz  seconed4
	                        mov  cx,221                  	;Column
	                        mov  dx,151                  	;Row
	                        mov  al,01h                  	;Pixel color
	seconed5:               int  10h
	                        inc  dx
	                        int  10h
	                        inc  dx
	                        int  10h
	                        mov  dx,151
	                        inc  cx
	                        cmp  cx,PLayer2Health
	                        jnz  seconed5
	                        ret
SeconedHealthBar ENDP

	;if first player is hit
Damage1 PROC
	                        mov  ah,0ch                  	;Draw Pixel Command
	                        sub  PLayer1Health,5
	                        mov  cx,PLayer1Health        	;Column
	                        cmp  cx,10
	                        jz   dead1
	blackrow1:              mov  dx,151                  	;Row
	                        mov  al,00h                  	;Pixel color
	                        int  10h
	                        inc  dx
	                        int  10h
	                        inc  dx
	                        int  10h
	                        dec  cx
	                        cmp  cx,PLayer1Health
	                        jnz  blackrow1
	                        ret
	dead1:                  
	                        mov  bx,100
	                        mov  PLayer1Health,bx
	                        dec  lives1
	                        ret
Damage1 ENDP

	;if seconed player is hit
Damage2 PROC
	                        mov  ah,0ch                  	;Draw Pixel Command
	                        sub  PLayer2Health,5
	                        mov  cx,PLayer2Health        	;Column
	                        cmp  cx,220
	                        jz   dead2
	blackrow2:              mov  dx,151                  	;Row
	                        mov  al,00h                  	;Pixel color
	                        int  10h
	                        inc  dx
	                        int  10h
	                        inc  dx
	                        int  10h
	                        dec  cx
	                        cmp  cx,PLayer2Health
	                        jnz  blackrow2
	                        ret
	dead2:                  
	                        mov  bx,310
	                        mov  PLayer2Health,bx
	                        dec  lives2
	                        ret
Damage2 ENDP

	;Appearing text
Text PROC
	                        mov  si,@data                	;moves to si the location in memory of the data segment
	                        mov  ah,13h                  	;service to print string in graphic mode
	                        mov  al,0                    	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                        mov  bh,0                    	;page number=always zero
	                        mov  bl,0fh                  	;color of the text (white foreground and black background)
	                        mov  cx,7                    	;length of string
	                        mov  dh,199                  	;y coordinate
	                        mov  dl,65                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msg1          	;mov bp the offset of the string
	                        int  10h

	                        mov  dh,199                  	;y coordinate
	                        mov  dl,92                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msg2          	;mov bp the offset of the string
	                        int  10h
	                        mov  bl, 0ch
	                        mov  cx,1
	                        mov  dh,201                  	;y coordinate
	                        mov  dl,92                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msglives      	;mov bp the offset of the string
	                        int  10h
	                        mov  dh,201                  	;y coordinate
	                        mov  dl,65                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msglives      	;mov bp the offset of the string
	                        int  10h
	                        mov  bl,0fh
	                        mov  cx,1
	                        mov  dh,201                  	;y coordinate
	                        mov  dl,94                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset lives2        	;mov bp the offset of the string
	                        int  10h
	                        mov  dh,201                  	;y coordinate
	                        mov  dl,67                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset lives1        	;mov bp the offset of the string
	                        int  10h
	                        mov  cx,7
	                        mov  dh,2                    	;y coordinate
	                        mov  dl,16                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset round         	;mov bp the offset of the string
	                        int  10h


	;;;;;;;;DINA;;;;;;;;;;;
	                        mov  cx,6
	                        mov  dh,203                  	;y coordinate
	                        mov  dl,65                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msg3          	;mov bp the offset of the string
	                        int  10h
	                        mov  dh,203                  	;y coordinate
	                        mov  dl,92                   	;x coordinate
	                        mov  es,si                   	;moves to es the location in memory of the data segment
	                        mov  bp,offset msg3          	;mov bp the offset of the string
	                        int  10h

	                        mov  dh,203                  	;y coordinate
	                        mov  dl,71                   	;x coordinate
	                        mov  ah,02h
	                        int  10h
	                        mov  ax,score1
	                        call printnumbers

	                        mov  dh,203                  	;y coordinate
	                        mov  dl,98                   	;x coordinate
	                        mov  ah,02h
	                        int  10h
	                        mov  ax,score2
	                        call printnumbers

	                        ret
Text ENDP

printnumbers proc
	                        push ax
	                        mov  cx, 0
	                        mov  bx, 10
@@loophere:
	                        mov  dx, 0
	                        div  bx
	                        push ax
	                        add  dl, '0'
	                        pop  ax
	                        push dx
	                        inc  cx
	                        cmp  ax, 0
	                        jnz  @@loophere
	                        mov  ah, 2
@@loophere2:
	                        pop  dx
	                        int  21h
	                        loop @@loophere2
	                        pop  ax
	                        ret
printnumbers endp


drawBack proc near
	                        mov  ah,0ch
	                        mov  al,0fh
	                        mov  bh,00h
	                        mov  cx,32

	start:                  
	                        mov  dx,24
	start2:                 
	                        int  10h
	                        add  dx,24
	                        cmp  dx,240
	                        jnz  start2
	                        add  cx,32
	                        cmp  cx, 320
	                        jnz  start

	                        mov  ah,0bh
	                        mov  cx,earthx
	                        mov  dx, earthy

	                        add  cx, ew
	                        add  dx, eH
	                        lea  di, e
	                        jmp  l

	d:                      
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h

	                        cmp  al,0
	                        jz   l
	                        int  10h


	l:                      
	                        inc  di
	                        dec  cx
	                        cmp  cx,earthx
	                        jnz  d

	                        add  cx, ew
	                        dec  dx
	                        cmp  dx,earthy
	                        jz   t
	                        jnz  d
	t:                      
	                        RET
drawBack ENDP


DrawPlayer1 proc near

	                        mov  ah,0bh
	                        mov  cx,player1x
	                        mov  dx, player1y

	                        add  cx, p1w
	                        add  dx, p1H
	                        lea  di, p1
	                        jmp  loop1

	draw1:                  
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h

	                        cmp  al,0
	                        jz   loop1
	                        mov  bl,p1hit
	                        cmp  bl,1
	                        je   drawred1
	                        jmp  keep1

	drawred1:               
	                        mov  al,0ch

	keep1:                  
	                        int  10h


	loop1:                  
	                        inc  di
	                        dec  cx
	                        cmp  cx,player1x
	                        jnz  draw1

	                        add  cx, p1w
	                        dec  dx
	                        cmp  dx,player1y
	                        jz   terminate1
	                        jnz  draw1

	terminate1:             
	                        mov  bl,0
	                        mov  p1hit,bl
	                        RET
DrawPlayer1 ENDP

DrawPlayer2 proc near
	                        mov  ah,0bh
	                        mov  cx,player2x
	                        mov  dx, player2y

	                        add  cx, p2w
	                        add  dx, p2H
	                        lea  di, p2
	                        jmp  loop2

	draw2:                  
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h
	                        cmp  al,0
	                        jz   loop2

	                        mov  bl,p2hit
	                        cmp  bl,1
	                        je   drawred2
	                        jmp  keep

	drawred2:               
	                        mov  al,0ch

	keep:                   
	                        int  10h


	loop2:                  
	                        inc  di
	                        dec  cx
	                        cmp  cx,player2x
	                        jnz  draw2

	                        add  cx, p2w
	                        dec  dx
	                        cmp  dx,player2y
	                        jz   terminate2
	                        jnz  draw2

	terminate2:             
	                        mov  bl,0
	                        mov  p2hit,bl
	                        RET
DrawPlayer2 ENDP

Drawfireball proc near
	                        mov  al,isfiring
	                        cmp  al,1
	                        jne  terminate3

	                        mov  ah,0bh
	                        mov  cx,fireball1x
	                        mov  dx, fireball1y

	                        add  cx, fireball1W
	                        add  dx, fireball1H
	                        lea  di, fireball1
	                        jmp  loop3

	draw3:                  
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h

	                        cmp  al,0
	                        jz   loop3
	                        int  10h


	loop3:                  
	                        inc  di
	                        dec  cx
	                        cmp  cx,fireball1x
	                        jnz  draw3

	                        add  cx, fireball1W
	                        dec  dx
	                        cmp  dx,fireball1y
	                        jz   terminate3
	                        jnz  draw3

	terminate3:             
	                        RET
Drawfireball ENDP

Drawfireball2 proc near
	                        mov  al,isfiring2
	                        cmp  al,1
	                        jne  terminate4

	                        mov  ah,0bh
	                        mov  cx,fireball2x
	                        mov  dx, fireball2y

	                        add  cx, fireball2W
	                        add  dx, fireball2H
	                        lea  di, fireball2
	                        jmp  loop4

	draw4:                  
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h

	                        cmp  al,0
	                        jz   loop4
	                        int  10h


	loop4:                  
	                        inc  di
	                        dec  cx
	                        cmp  cx,fireball2x
	                        jnz  draw4

	                        add  cx, fireball2W
	                        dec  dx
	                        cmp  dx,fireball2y
	                        jz   terminate4
	                        jnz  draw4

	terminate4:             
	                        RET
Drawfireball2 ENDP

Drawcoins PROC near

	                        push di
	                        push cx
	                        push dx
	                        push ax
	                        push bx
	                        push si


	                        mov  ah,0bh
	                        mov  cx,coinsx1
	                        mov  dx,coinsy1
	                        add  cx,coinW
	                        add  dx,coinH
	                        lea  di,coin
	                        jmp  loop5

	draw5:                  
	                        mov  ah,0ch
	                        mov  al, [di]
	                        mov  bh, 00h

	                        cmp  al,0
	                        jz   loop5
	                        int  10h


	loop5:                  
	                        inc  di
	                        dec  cx
	                        cmp  cx,coinsx1
	                        jnz  draw5

	                        add  cx, coinW
	                        dec  dx
	                        cmp  dx,coinsy1
	                        jz   terminate5
	                        jnz  draw5

	terminate5:             

	                        pop  si
	                        pop  bx
	                        pop  ax
	                        pop  dx
	                        pop  cx
	                        pop  di

	                        RET
Drawcoins ENDP

	;;;;;;;;;DRAW EACH COIN;;;;;;;;;;;
Draweachcoin proc near
	                        push ax
	                        push bx
	                        push cx
	                        push dx
	                        push di

	                        mov  bx,coinsize
	                        mov  si,bx
	                        mov  di,0
	draw7:                  
	                        mov  ax,coinx[di]
	                        mov  coinsx1,ax
	                        mov  bx,coiny[di]
	                        mov  coinsy1,bx
	                        call Drawcoins
	                        add  di,2
	                        dec  si
	                        jnz  draw7


	                        pop  ax
	                        pop  bx
	                        pop  cx
	                        pop  dx
	                        pop  di
	                        RET
Draweachcoin ENDP
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;   Delay proc nearedure      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

delay proc near
	                        push cx
	                        push ax

	                        mov  cx,0ffffh

	del1:                   

	                        mov  ax,0

	del2:                   
	                        inc  ax
	                        cmp  ax,0fh
	                        jnz  del2

	                        loop del1


	                        pop  ax
	                        pop  cx
	                        RET
delay endp

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;; flush keyboard-buffer proc near ;;;;;;
flushkeybuffer proc near
	                        mov  ah,0ch
	                        int  21h
	                        RET
flushkeybuffer endp
	;;;;;;;;;;;;;; checkinput for player 1  proc ;;;;;;;
getinput proc near
	                        push ax
	                        push bx
	                        mov  ah,01h
	                        int  16h

	                        cmp  ax, Wkey
	                        jz   up

	                        cmp  ax, Skey
	                        jz   down

	                        cmp  ax, Dkey
	                        jz   right

	                        cmp  ax, Akey
	                        jz   left
	                        jmp  freeze



	up:                     
	                        call flushkeybuffer
	                        mov  bl, updirection
	                        mov  input, bl
	                        jmp  nextinput1

	down:                   
	                        call flushkeybuffer
	                        mov  bl, downdirection
	                        mov  input, bl
	                        jmp  nextinput1

	right:                  
	                        call flushkeybuffer
	                        mov  bl, rightdirection
	                        mov  input, bl
	                        jmp  nextinput1

	left:                   
	                        call flushkeybuffer
	                        mov  bl, leftdirection
	                        mov  input, bl
	                        jmp  nextinput1

	freeze:                 
	                        mov  bl, nomove
	                        mov  input, bl
	                        jmp  nextinput1

	nextinput1:             
	                        cmp  ax, arrowup
	                        jz   up2

	                        cmp  ax, arrowdown
	                        jz   down2

	                        cmp  ax, arrowright
	                        jz   right2

	                        cmp  ax, arrowleft
	                        jz   left2
	                        jmp  freeze2

	up2:                    
	                        call flushkeybuffer
	                        mov  bl, updirection
	                        mov  input2, bl
	                        jmp  nextinput2

	down2:                  
	                        call flushkeybuffer
	                        mov  bl, downdirection
	                        mov  input2, bl
	                        jmp  nextinput2

	right2:                 
	                        call flushkeybuffer
	                        mov  bl, rightdirection
	                        mov  input2, bl
	                        jmp  nextinput2

	left2:                  
	                        call flushkeybuffer
	                        mov  bl, leftdirection
	                        mov  input2, bl
	                        jmp  nextinput2

	freeze2:                
	                        mov  bl, nomove
	                        mov  input2, bl
	                        jmp  nextinput2

	nextinput2:             
	                        cmp  ax,spacekey
	                        jz   fire
	                        jmp  nextinput3

	fire:                   
	                        call flushkeybuffer
	                        mov  bl, isfiring
	                        cmp  bl,1
	                        jnz  startfiring
	                        jmp  nextinput3


	startfiring:            
	                        call flushkeybuffer
	                        mov  bl,1
	                        mov  byte ptr [isfiring], bl
	                        mov  bx,player1x
	                        add  bx,10
	                        mov  fireball1x, bx
	                        mov  bx, player1y
	                        add  bx,10
	                        mov  fireball1y, bx
	                        jmp  nextinput3

	nextinput3:             
	                        cmp  ax,enterkey
	                        jz   fire2
	                        jmp  endinput

	fire2:                  
	                        call flushkeybuffer
	                        mov  bl, isfiring2
	                        cmp  bl,1
	                        jnz  startfiring2
	                        jmp  endinput


	startfiring2:           
	                        call flushkeybuffer
	                        mov  bl,1
	                        mov  byte ptr [isfiring2], bl
	                        mov  bx,player2x
	                        sub  bx,10
	                        mov  fireball2x, bx
	                        mov  bx, player2y
	                        add  bx,10
	                        mov  fireball2y, bx
	                        jmp  endinput



	endinput:               
	                        call flushkeybuffer
	                        pop  bx
	                        pop  ax
	                        RET
getinput ENDP
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;; update player 1 proc near ;;;;;;;;;;;;;;;;
updateobjects proc near
	                        push bx

	;; player 1 movement ;;
	                        mov  bl,input
	                        cmp  bl,updirection
	                        jz   checkup1



	                        cmp  bl,downdirection
	                        jz   checkdown1


	                        cmp  bl,rightdirection
	                        jz   checkright1

	                        cmp  bl,leftdirection
	                        jz   checkleft1

	                        cmp  bl, nomove
	                        jz   nextupdate1

	checkup1:               
	                        mov  bx,player1y
	                        cmp  bx,220
	                        jg   moveup1
	                        jmp  nextupdate1
	moveup1:                
	                        sub  bx,yplayer1velocity
	                        mov  player1y, bx
	                        jmp  nextupdate1

	checkdown1:             
	                        mov  bx,player1y
	                        cmp  bx,340
	                        jl   movedown1
	                        jmp  nextupdate1
	movedown1:              
	                        add  bx,yplayer1velocity
	                        mov  player1y, bx
	                        jmp  nextupdate1

	checkleft1:             
	                        mov  bx,player1x
	                        cmp  bx,-60
	                        jg   moveleft1
	                        jmp  nextupdate1
	moveleft1:              
	                        sub  bx,xplayer1velocity
	                        mov  player1x, bx
	                        jmp  nextupdate1

	checkright1:            
	                        mov  bx,player1x
	                        cmp  bx,180
	                        jle  moveright1
	                        jmp  nextupdate1
	moveright1:             
	                        add  bx,xplayer1velocity
	                        mov  player1x, bx
	                        jmp  nextupdate1

	                        mov  bl,input2
	                        cmp  bl,updirection
	                        jz   checkup2


	nextupdate1:            
	                        mov  bl,input2
	                        cmp  bl,downdirection
	                        jz   checkdown2

	                        cmp  bl,rightdirection
	                        jz   checkright2


	                        cmp  bl,leftdirection
	                        jz   checkleft2


	                        cmp  bl, nomove
	                        jz   fireball1update

	checkup2:               
	                        mov  bx,player2y
	                        cmp  bx,220
	                        jg   moveup2
	                        jmp  fireball1update
	moveup2:                
	                        sub  bx,yplayer2velocity
	                        mov  player2y, bx
	                        jmp  fireball1update

	checkdown2:             
	                        mov  bx,player2y
	                        cmp  bx,340
	                        jl   movedown2
	                        jmp  fireball1update
	movedown2:              
	                        add  bx,yplayer2velocity
	                        mov  player2y, bx
	                        jmp  fireball1update

	checkleft2:             
	                        mov  bx,player2x
	                        cmp  bx,-25
	                        jg   moveleft2
	                        jmp  fireball1update
	moveleft2:              
	                        sub  bx,xplayer2velocity
	                        mov  player2x, bx
	                        jmp  fireball1update

	checkright2:            
	                        mov  bx,player2x
	                        cmp  bx,210
	                        jle  moveright2
	                        jmp  fireball1update
	moveright2:             
	                        add  bx,xplayer2velocity
	                        mov  player2x, bx
	                        jmp  fireball1update



	fireball1update:        
	                        mov  al, isfiring
	                        cmp  al,1
	                        jne  stopfireball1

	                        mov  bx,fireball1x
	                        mov  ax,player2x
	                        sub  ax,10
	                        cmp  bx,ax
	                        jge  p2startdamage
	                        jmp  updatefireball1velocity

	p2startdamage:          
	                        mov  ax,player2x
	                        add  ax,10
	                        cmp  fireball1x,ax
	                        jle  checkdamage1
	                        jmp  updatefireball1velocity

	checkdamage1:           
	                        mov  ax,player2y
	                        sub  ax,10
	                        cmp  fireball1y,ax
	                        jge  checkdamage2
	                        jmp  updatefireball1velocity

	checkdamage2:           
	                        add  ax,45
	                        cmp  fireball1y,ax
	                        jg   updatefireball1velocity
	                        call Damage2
	                        mov  bl,1
	                        mov  p2hit,bl
	                        jmp  stopfireball1

	updatefireball1velocity:
	                        cmp  bx, 210
	                        jge  stopfireball1
	                        add  bx,fireball1velocity
	                        mov  fireball1x,bx
	                        jmp  fireball2update

	stopfireball1:          
	                        mov  bl,0
	                        mov  isfiring,bl
	                        jmp  fireball2update

	fireball2update:        
	                        mov  al, isfiring2
	                        cmp  al,1
	                        jne  stopfireball2
	                        mov  bx,fireball2x
	                        mov  ax,player1x
	                        add  ax,20
	                        cmp  bx,ax
	                        jle  p1startdamage
	                        jmp  updatefireball2velocity

	p1startdamage:          
	                        mov  ax,player1x
	                        sub  ax,10
	                        cmp  fireball2x,ax
	                        jge  checkdamage3
	                        jmp  updatefireball2velocity

	checkdamage3:           
	                        mov  ax,player1y
	                        sub  ax,15
	                        cmp  fireball2y,ax
	                        jge  checkdamage4
	                        jmp  updatefireball2velocity

	checkdamage4:           
	                        add  ax,45
	                        cmp  fireball2y,ax
	                        jg   updatefireball2velocity
	                        call Damage1
	                        mov  bl,1
	                        mov  p1hit,bl
	                        jmp  stopfireball2

	updatefireball2velocity:
	                        mov  bx, fireball2x
	                        cmp  bx, -40
	                        jle  stopfireball2
	                        sub  bx,fireball2velocity
	                        mov  fireball2x,bx
	                        jmp  endupdateobjects
	stopfireball2:          
	                        mov  bl,0
	                        mov  isfiring2,bl

	endupdateobjects:       
	                        pop  bx
	                        RET
updateobjects endp

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;; DINA  ;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;Get Random;;;;;;;;;;;;;;
getrandom proc
	                        push dx
	                        mov  ax,25173
	                        mul  variable1
	                        add  ax, 13849
	                        mov  variable1,ax
	                        pop  dx
	                        ret
getrandom endp

getrandomfrom1to20 proc
	                        push dx
	                        push bx
	                        mov  dx,0
	                        mov  bx,20
	                        div  bx
	                        inc  dx
	                        mov  ax,dx
	                        pop  bx
	                        pop  dx
	                        ret
getrandomfrom1to20 endp

getrandomfrom1to60 proc
	                        push dx
	                        push bx
	                        mov  dx,0
	                        mov  bx,60
	                        div  bx
	                        inc  dx
	                        mov  ax,dx
	                        pop  bx
	                        pop  dx
	                        ret
getrandomfrom1to60 endp

	;;;;;;;;;update coins/;;;;;;;;;;;;
updatecoins proc near

	                        mov  di,0
	                        mov  bx,coinsize
	                        mov  si,bx

	coinsfalling:           

	                        mov  bx,coiny[di]
	checkifsameyp1:         
	                        mov  dx,player1y
	                        sub  dx,190
	                        cmp  bx,dx
	                        je   checkifsamexp11

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp11

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp11

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp11


	                        jmp  checkforsecondplayer

	checkifsamexp11:        
	                        mov  dx,player1x
	                        add  dx,60
	                        cmp  coinx[di],dx
	                        jge  checkifsamexp12
	                        jmp  checkforsecondplayer

	checkifsamexp12:        
	                        add  dx,30
	                        cmp  coinx[di],dx
	                        jle  incp1score
	                        jmp  checkforsecondplayer

	incp1score:             
	                        inc  score1
	                        jmp  newcoinsinitialization





	checkforsecondplayer:   

	                        mov  bx,coiny[di]
	checkifsameyp2:         
	                        mov  dx,player2y
	                        sub  dx,190
	                        cmp  bx,dx
	                        je   checkifsamexp21

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp21

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp21

	                        add  dx,1
	                        cmp  bx,dx
	                        je   checkifsamexp21


	                        jmp  checkcoinsend

	checkifsamexp21:        
	                        mov  dx,player2x
	                        add  dx,60
	                        cmp  coinx[di],dx
	                        jge  checkifsamexp22
	                        jmp  checkcoinsend

	checkifsamexp22:        
	                        add  dx,30
	                        cmp  coinx[di],dx
	                        jle  incp2score
	                        jmp  checkcoinsend

	incp2score:             
	                        inc  score2
	                        jmp  newcoinsinitialization


	returntocoinsfalling:   
	                        jmp  coinsfalling


	checkcoinsend:          
	                        cmp  bx,190
	                        jb   coninuefalling
	                        jmp  newcoinsinitialization

	coninuefalling:         
	                        mov  ax,coiny[di]
	                        add  ax,coinspeed
	                        mov  coiny[di],ax
	                        jmp  last

	newcoinsinitialization: 
	                        call getrandom               	;get random value           ;
	                        call getrandomfrom1to20      	;get random value from 1 to 20
	                        mov  coiny[di],ax            	;put y of coin with random value

	                        call getrandom               	;get random value
	                        call getrandomfrom1to60      	;get random value from 1 to 60
	                        add  ax,coinx[di]
	                        cmp  ax,290                  	;compare the new value of x with 300(end of screen width)
	                        jg   changex
	                        mov  coinx[di],ax
	                        jmp  last

	changex:                                             	; if the new value of x greater than 300 will subtract number from 1 to 20
	                        call getrandom
	                        call getrandomfrom1to60
	                        mov  bx,ax
	                        sub  bx,ax
	                        mov  coinx[di],ax

	last:                   
	                        add  di,2
	                        dec  si
	                        jnz  returntocoinsfalling

	                        RET
updatecoins ENDP


	;;;;;;;;;;;;;;;DINA;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;player catch coin;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;mov coinsx1,ax
	;mov dx,coiny[di]
	;mov coinsy1,dx
	;;;;;;;; clear player 1 ;;;;;;;;;;

clearplayer1 proc near

	                        mov  si,player1x
	                        mov  di,player1y
	                        add  si,p1w
	                        add  di,p1h
	                        mov  cx, player1x
	                        mov  dx, player1y
	                        mov  ah,0ch
	                        mov  al,00h
	clearp1row:             
	                        mov  dx,player1y

	clearp1col:             
	                        int  10h
	                        inc  dx
	                        cmp  dx, di
	                        jnz  clearp1col

	                        inc  cx
	                        cmp  cx, si
	                        jnz  clearp1row
	                        RET
clearplayer1 endp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;; clear player 2 ;;;;;;;;

clearplayer2 proc near

	                        mov  si,player2x
	                        mov  di,player2y
	                        add  si,p2w
	                        add  di,p2h
	                        mov  cx, player2x
	                        mov  dx, player2y
	                        mov  ah,0ch
	                        mov  al,00h
	clearp2row:             
	                        mov  dx,player2y

	clearp2col:             
	                        int  10h
	                        inc  dx
	                        cmp  dx, di
	                        jnz  clearp2col

	                        inc  cx
	                        cmp  cx, si
	                        jnz  clearp2row

	                        RET
clearplayer2 endp

	;;;;;;;;;;;;clear fireball1;;;;;;;;;;;;;
	;description
clearfireball1 PROC
	                        mov  si,fireball1x
	                        mov  di,fireball1y

	                        add  si,fireball1W
	                        add  di,fireball1H

	                        mov  cx, fireball1x
	                        mov  dx, fireball1y
	                        mov  ah,0ch
	                        mov  al,00h

	clearfireball1col:      

	                        mov  dx,fireball1y
	clearfireball1row:      
	                        int  10h
	                        inc  dx
	                        cmp  dx,di
	                        jnz  clearfireball1row

	                        inc  cx
	                        cmp  cx,si

	                        jnz  clearfireball1col

	                        ret
clearfireball1 ENDP


clearfireball2 PROC
	                        mov  si,fireball2x
	                        mov  di,fireball2y

	                        add  si,fireball2W
	                        add  di,fireball2H

	                        mov  cx, fireball2x
	                        mov  dx, fireball2y
	                        mov  ah,0ch
	                        mov  al,00h

	clearfireball2col:      

	                        mov  dx,fireball2y
	clearfireball2row:      
	                        int  10h
	                        inc  dx
	                        cmp  dx,di
	                        jnz  clearfireball2row

	                        inc  cx
	                        cmp  cx,si

	                        jnz  clearfireball2col

	                        ret
clearfireball2 ENDP
	;;;;;;;;;;;;;;;;;;;;;;;
	;DINA;
	;;;;;;;;;clear coins;;;;;;;;;;;
clearcoin proc near
	                        push di
	                        push cx
	                        push dx
	                        push ax
	                        push bx
	                        push si

	                        mov  si,coinsx1
	                        mov  di,coinsy1

	                        add  si,coinW
	                        add  di,coinH

	                        mov  cx, coinsx1
	                        mov  dx, coinsy1
	                        mov  ah,0ch
	                        mov  al,00h

	clearcoincol:           

	                        mov  dx,coinsy1
	clearcoinrow:           
	                        int  10h
	                        inc  dx
	                        cmp  dx,di
	                        jnz  clearcoinrow

	                        inc  cx
	                        cmp  cx,si
	                        jnz  clearcoincol


	                        pop  si
	                        pop  bx
	                        pop  ax
	                        pop  dx
	                        pop  cx
	                        pop  di

	                        RET
clearcoin ENDP
	;DINA
	;;;;;;;;;;;;clear each coin;;;;;;;;;;
cleareachcoin proc near
	                        push ax
	                        push bx
	                        push cx
	                        push dx
	                        push di
	                        push si

	                        mov  bx,coinsize
	                        mov  si,bx
	                        mov  di,0
	cleareach:              
	                        mov  ax,coinx[di]
	                        mov  coinsx1,ax
	                        mov  bx,coiny[di]
	                        mov  coinsy1,bx
	                        call clearcoin
	                        add  di,2d
	                        dec  si
	                        jnz  cleareach


	                        pop  si
	                        pop  di
	                        pop  dx
	                        pop  cx
	                        pop  bx
	                        pop  ax

	                        RET
cleareachcoin ENDP



clearobjects proc near
	                        push cx
	                        push dx
	                        push ax

	                        call clearplayer1
	                        call clearplayer2
	                        call clearfireball1
	                        call clearfireball2

	                        pop  ax
	                        pop  dx
	                        pop  cx
	                        RET
clearobjects endp


terminateandgetwinner PROC
	                        mov  al,3
	                        mov  ah,0
	                        int  10h                     	;change to text mode
	                        mov  ax,0600h
	                        mov  bh,07
	                        mov  cx,0
	                        mov  dx,184fh
	                        int  10h                     	;clear the screen
	;compare the scores to know the winner
	                        mov  ax,score1
	                        mov  bx,score2
	                        cmp  ax,bx
	                        jz   dispdraw
	                        ja   player1winsgame
	                        jc   player2winsgame
	player1winsgame:        mov  dx,offset player1winsmsg
	                        mov  ah,9
	                        int  21h
	                        jmp  endwinnerscreen
	player2winsgame:        mov  dx,offset player2winsmsg
	                        mov  ah,9
	                        int  21h
	                        jmp  endwinnerscreen
	;Display the end game string
	dispdraw:               mov  ah,9
	                        mov  dx,offset gameovermsg
	                        int  21h
	endwinnerscreen:        mov  ax, 4c00h
	                        int  21h                     	;end the program


terminateandgetwinner endp


printax proc
	                        push ax
	                        mov  cx, 0
	                        mov  bx, 10
@@loophereprintax:
	                        mov  dx, 0
	                        div  bx
	                        push ax
	                        add  dl, '0'
	                        pop  ax
	                        push dx
	                        inc  cx
	                        cmp  ax, 0
	                        jnz  @@loophereprintax
	                        mov  ah, 2
@@loophereprintax2:
	                        pop  dx
	                        int  21h
	                        loop @@loophereprintax2
	                        pop  ax
	                        ret
printax endp


End main


