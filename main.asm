.model compact
.386
.stack 64

.data

	lives1            dw  '3'
	lives2            dw  '3'
	msglives          db  3,'$'
	PLayer1Health     dw  100
	PLayer2Health     dw  310
	msg1              db  'PLayer1$'
	msg2              db  'PLayer2$'
	instmsg1          db  'Use up and down arrows to move$'
	instmsg2          db  'Press Enter to choose your mode$'
	;;;Dina;;;
	msg3              db  'Score:$'
	round             db  'Round ','$'
	roundnum          db  '1'
	score1            dw  0
	score2            dw  0


	iconW             equ 10
	iconH             equ 13
	icon              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 0, 0, 0, 16, 210, 6, 6, 6, 6, 210, 16, 0, 17, 209, 6, 42, 42, 42, 42, 42, 210, 17
	                  DB  208, 6, 42, 42, 42, 42, 42, 43, 42, 209, 208, 42, 42, 42, 42, 42, 42, 42, 43, 210, 208, 42, 42, 42, 42, 42, 42, 41, 42, 210, 208, 42, 42, 42, 42, 42, 42, 41, 42, 210
	                  DB  208, 6, 43, 42, 42, 42, 41, 42, 43, 209, 17, 210, 42, 43, 43, 43, 43, 43, 211, 17, 0, 16, 212, 42, 42, 42, 42, 188, 16, 0, 0, 0, 17, 17, 17, 17, 17, 17, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	iconx             dw  120
	icony             dw  116

	zW                equ 64
	zH                equ 47
	z                 DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
	                  DB  112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 184, 184, 4, 40
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 183, 112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 184, 184, 184, 184, 184
	                  DB  184, 184, 112, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 184, 4, 4, 112, 112, 112, 112, 112, 112, 112, 16, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4
	                  DB  4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 112, 4, 4, 112, 112, 112, 112, 112, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 40, 112, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 184, 40, 40, 40, 40, 112, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 112, 4, 4, 40, 40, 112, 184, 184, 16, 16, 112, 112, 114, 115, 115
	                  DB  6, 6, 6, 6, 6, 113, 4, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 184, 16, 16, 16, 16, 4, 4, 6, 42, 42, 42, 42, 6, 6, 6, 112, 4, 184, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 184, 16
	                  DB  16, 16, 16, 113, 4, 6, 42, 42, 6, 6, 6, 6, 6, 113, 113, 185, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 186
	                  DB  16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                  DB  16, 4, 40, 4, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 186, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 184, 184, 184, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42
	                  DB  6, 4, 6, 6, 6, 6, 6, 186, 16, 16, 16, 0, 16, 16, 16, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 6, 42, 42, 42, 6, 4, 4, 6, 6, 6, 6, 6, 186, 16, 16, 0, 0, 16, 16, 16, 112
	                  DB  112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16
	                  DB  184, 184, 185, 42, 42, 42, 42, 42, 6, 4, 6, 6, 6, 6, 6, 187, 184, 184, 16, 16, 16, 16, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 184, 4, 4, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB  4, 112, 16, 16, 184, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16
	                  DB  16, 16, 0, 0, 0, 0, 16, 16, 184, 4, 4, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 4, 112, 16, 16, 184, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16, 112, 4, 4, 4, 4, 4, 4, 6, 42, 42
	                  DB  6, 6, 6, 6, 6, 186, 185, 185, 184, 184, 184, 184, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 4, 4, 6, 42, 42, 42, 42, 6, 6, 6, 16, 16, 16, 16, 16, 112, 112, 112, 112, 184, 16
	                  DB  16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 0, 16, 16, 184, 184, 184, 4, 4
	                  DB  4, 4, 4, 4, 4, 6, 115, 115, 115, 115, 115, 115, 114, 16, 16, 16, 184, 184, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 112, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184
	                  DB  112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  16, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 112, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16
	                  DB  16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 112, 183, 4, 40, 40, 40, 40, 4, 4
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 184, 40
	                  DB  40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 16, 4, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 184, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 112, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 184, 184, 184, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0



	ballsW            equ 32
	ballsH            equ 30
	balls             DB  0, 0, 0, 0, 0, 0, 16, 16, 17, 17, 17, 17, 17, 16, 0, 0, 0, 0, 16, 17, 17, 17, 17, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 114
	                  DB  42, 42, 42, 42, 6, 17, 16, 0, 0, 16, 17, 6, 42, 42, 42, 42, 187, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 114, 42, 43, 43, 43, 43, 43, 6, 186, 16
	                  DB  16, 185, 6, 42, 42, 42, 42, 43, 42, 188, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 42, 42, 42, 42, 43, 43, 116, 16, 16, 6, 43, 43, 41, 42, 41, 42
	                  DB  43, 43, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 42, 42, 42, 42, 43, 14, 116, 16, 16, 6, 43, 42, 42, 43, 43, 42, 66, 44, 187, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 186, 42, 43, 42, 42, 42, 42, 66, 68, 116, 16, 16, 6, 43, 41, 42, 43, 43, 41, 89, 14, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 43, 43
	                  DB  42, 42, 42, 12, 67, 14, 116, 16, 16, 6, 43, 43, 43, 42, 42, 66, 91, 44, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 43, 43, 42, 66, 68, 44, 116, 16
	                  DB  16, 114, 42, 43, 43, 41, 42, 67, 44, 43, 186, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 43, 43, 44, 44, 116, 16, 0, 0, 16, 115, 42, 43, 43, 43, 44
	                  DB  43, 186, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 17, 6, 6, 6, 6, 116, 16, 16, 16, 16, 16, 16, 115, 6, 6, 6, 6, 17, 16, 16, 16, 16, 0, 0, 0
	                  DB  0, 16, 16, 114, 114, 114, 114, 186, 16, 16, 16, 16, 16, 186, 114, 114, 114, 114, 186, 16, 16, 16, 16, 16, 187, 114, 114, 114, 114, 16, 0, 0, 16, 16, 115, 42, 43, 43, 43, 42
	                  DB  114, 16, 0, 16, 186, 6, 43, 43, 43, 43, 6, 186, 16, 0, 16, 114, 42, 43, 43, 43, 42, 115, 16, 0, 17, 115, 43, 42, 42, 43, 43, 43, 42, 115, 16, 187, 6, 43, 42, 42
	                  DB  42, 42, 43, 6, 188, 16, 114, 42, 42, 42, 42, 42, 42, 43, 116, 17, 17, 42, 43, 42, 42, 42, 42, 43, 43, 6, 16, 114, 43, 43, 42, 42, 42, 42, 43, 44, 115, 16, 6, 43
	                  DB  43, 42, 42, 42, 42, 43, 43, 17, 17, 42, 43, 43, 43, 42, 42, 66, 67, 6, 16, 114, 43, 42, 42, 42, 42, 42, 65, 14, 188, 16, 6, 43, 42, 42, 42, 42, 42, 67, 43, 17
	                  DB  17, 42, 43, 43, 42, 42, 43, 66, 92, 6, 16, 114, 43, 42, 42, 42, 42, 42, 88, 14, 188, 16, 6, 43, 42, 42, 42, 42, 42, 31, 43, 17, 17, 42, 43, 43, 42, 42, 66, 90
	                  DB  14, 6, 16, 114, 43, 43, 42, 42, 42, 65, 68, 44, 115, 16, 6, 43, 43, 43, 42, 42, 67, 14, 44, 17, 17, 114, 43, 43, 43, 43, 43, 14, 43, 188, 16, 186, 6, 43, 42, 42
	                  DB  42, 66, 44, 116, 187, 16, 187, 42, 43, 43, 42, 43, 14, 44, 115, 17, 0, 16, 114, 43, 43, 44, 44, 43, 188, 16, 0, 16, 186, 6, 43, 43, 44, 44, 116, 187, 16, 0, 16, 187
	                  DB  42, 43, 43, 44, 44, 115, 16, 0, 0, 0, 16, 187, 187, 188, 188, 187, 16, 16, 16, 16, 16, 186, 187, 188, 188, 188, 186, 16, 16, 16, 16, 16, 186, 187, 188, 188, 188, 16, 0, 0
	                  DB  0, 0, 16, 16, 16, 16, 16, 185, 6, 6, 6, 6, 114, 16, 16, 16, 16, 16, 16, 115, 6, 6, 6, 6, 17, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42
	                  DB  43, 43, 43, 43, 42, 115, 16, 0, 0, 16, 115, 42, 43, 43, 43, 43, 42, 186, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 43, 43, 43, 43, 43, 43, 116, 16
	                  DB  16, 115, 42, 43, 43, 43, 43, 43, 43, 43, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 42, 41, 43, 43, 43, 43, 116, 16, 16, 6, 43, 43, 43, 43, 43, 43
	                  DB  43, 44, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43, 42, 42, 43, 42, 66, 68, 116, 16, 16, 6, 43, 43, 43, 41, 42, 43, 90, 14, 187, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 186, 42, 43, 43, 43, 42, 41, 67, 68, 116, 16, 16, 6, 43, 43, 43, 42, 42, 43, 91, 14, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 42, 43
	                  DB  43, 43, 42, 66, 68, 44, 116, 16, 16, 6, 43, 43, 43, 43, 43, 90, 14, 44, 187, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 187, 42, 43, 43, 43, 43, 44, 116, 17, 16
	                  DB  16, 17, 6, 43, 43, 43, 43, 44, 44, 188, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 187, 42, 43, 43, 43, 116, 17, 16, 0, 0, 16, 17, 6, 42, 43, 43, 43
	                  DB  188, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 17, 17, 17, 16, 16, 0, 0, 0, 0, 16, 16, 17, 17, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0

	zW                equ 64
	zH                equ 47
	zshape            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
	                  DB  112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 184, 184, 4, 40
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 183, 112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 184, 184, 184, 184, 184
	                  DB  184, 184, 112, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 184, 4, 4, 112, 112, 112, 112, 112, 112, 112, 16, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4
	                  DB  4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 112, 4, 4, 112, 112, 112, 112, 112, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 40, 112, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 184, 40, 40, 40, 40, 112, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 112, 4, 4, 40, 40, 112, 184, 184, 16, 16, 112, 112, 114, 115, 115
	                  DB  6, 6, 6, 6, 6, 113, 4, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 184, 16, 16, 16, 16, 4, 4, 6, 42, 42, 42, 42, 6, 6, 6, 112, 4, 184, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 184, 16
	                  DB  16, 16, 16, 113, 4, 6, 42, 42, 6, 6, 6, 6, 6, 113, 113, 185, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 186
	                  DB  16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                  DB  16, 4, 40, 4, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 186, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 184, 184, 184, 16, 16, 16, 0, 16, 16, 16, 42, 42, 42, 42, 42
	                  DB  6, 4, 6, 6, 6, 6, 6, 186, 16, 16, 16, 0, 16, 16, 16, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 6, 42, 42, 42, 6, 4, 4, 6, 6, 6, 6, 6, 186, 16, 16, 0, 0, 16, 16, 16, 112
	                  DB  112, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16
	                  DB  184, 184, 185, 42, 42, 42, 42, 42, 6, 4, 6, 6, 6, 6, 6, 187, 184, 184, 16, 16, 16, 16, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 184, 4, 4, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB  4, 112, 16, 16, 184, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16
	                  DB  16, 16, 0, 0, 0, 0, 16, 16, 184, 4, 4, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 4, 112, 16, 16, 184, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16, 112, 4, 4, 4, 4, 4, 4, 6, 42, 42
	                  DB  6, 6, 6, 6, 6, 186, 185, 185, 184, 184, 184, 184, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 4, 40, 4, 4, 4, 4, 4, 6, 42, 42, 42, 42, 6, 6, 6, 16, 16, 16, 16, 16, 112, 112, 112, 112, 184, 16
	                  DB  16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 0, 16, 16, 184, 184, 184, 4, 4
	                  DB  4, 4, 4, 4, 4, 6, 115, 115, 115, 115, 115, 115, 114, 16, 16, 16, 184, 184, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 112, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184
	                  DB  112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  16, 16, 16, 184, 40, 40, 4, 4, 4, 4, 4, 4, 4, 112, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 4, 4, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16
	                  DB  16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 112, 183, 4, 40, 40, 40, 40, 4, 4
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 184, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112
	                  DB  112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 184, 40
	                  DB  40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 4, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 112, 112, 184, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 16, 16, 16, 4, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 112, 112, 112, 112, 184, 16, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 112, 4, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
	                  DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 184, 184, 184, 184, 184, 184, 184, 184, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                  DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0



	eW                equ 50
	eH                equ 50
	e                 DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 18, 18, 18, 224, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 151, 148, 148, 148, 145, 144, 144, 18
	                  DB  18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 246, 150
	                  DB  150, 150, 148, 54, 54, 54, 148, 146, 143, 142, 142, 142, 143, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 18, 18, 246, 245, 150, 54, 54, 54, 3, 3, 3, 3, 54, 148, 10, 10, 10, 10, 167, 238, 238, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 142, 10, 10, 10, 10, 10, 164, 239, 18, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 3, 54, 3, 146, 3, 3, 3, 3, 3, 3, 3, 3, 148, 10
	                  DB  10, 10, 10, 10, 10, 164, 237, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 245, 149, 3, 3, 3, 3, 148
	                  DB  3, 3, 3, 3, 3, 3, 3, 54, 3, 143, 10, 10, 10, 10, 10, 10, 143, 239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 18, 246, 150, 54, 3, 3, 3, 3, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 146, 146, 144, 10, 10, 10, 143, 146, 146, 246, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 150, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 143, 144, 144, 144, 148, 54, 148, 224
	                  DB  18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 149, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 54, 54, 148, 247, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 148, 54, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 54, 3, 3, 3, 3, 3, 3, 54, 54, 54, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19
	                  DB  244, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 148, 3, 3, 3, 3, 3, 3, 54, 54, 54, 150, 246, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 143, 143, 148, 54, 3, 3, 3, 3, 54, 54, 54
	                  DB  54, 151, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 147, 145, 168, 10
	                  DB  143, 148, 54, 3, 3, 3, 3, 54, 54, 54, 54, 244, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 3, 3, 147, 143, 10, 143, 148, 54, 3, 3, 3, 54, 54, 54, 54, 54, 244, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240, 144
	                  DB  148, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 147, 147, 147, 3, 3, 3, 3, 3, 54, 54, 54, 54, 54, 149, 244, 18, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 18, 239, 143, 143, 143, 148, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 54, 54, 3, 3, 3, 3, 3, 3, 3, 54, 54
	                  DB  54, 79, 149, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 10, 142, 148, 54, 3, 3, 3, 54, 54, 54, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3
	                  DB  3, 3, 3, 3, 3, 146, 143, 3, 54, 54, 54, 78, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 10, 142, 148, 54, 3, 54, 148, 147, 147, 147
	                  DB  147, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 3, 147, 144, 144, 146, 148, 148, 79, 78, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 237, 10
	                  DB  10, 147, 148, 54, 3, 148, 145, 143, 143, 143, 143, 3, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 143, 10, 10, 10, 142, 143, 3, 78, 148, 18, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 18, 237, 10, 143, 148, 3, 3, 3, 144, 143, 143, 143, 143, 143, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 148, 143, 143, 10, 10, 10, 10, 143
	                  DB  143, 3, 148, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 236, 10, 143, 145, 145, 145, 145, 144, 144, 10, 10, 164, 143, 144, 148, 54, 3, 3, 3, 3, 3, 3
	                  DB  3, 54, 148, 144, 143, 164, 10, 10, 10, 164, 143, 145, 144, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 238, 143, 144, 144, 144, 144, 143, 10, 10, 10, 10, 10
	                  DB  143, 143, 148, 54, 3, 3, 3, 3, 54, 54, 54, 54, 148, 144, 143, 164, 10, 10, 10, 10, 10, 143, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240
	                  DB  142, 10, 10, 10, 10, 10, 10, 10, 164, 10, 143, 147, 148, 3, 3, 3, 3, 54, 54, 54, 54, 54, 3, 147, 143, 164, 10, 10, 10, 10, 10, 236, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 239, 164, 10, 10, 10, 10, 10, 10, 10, 10, 144, 143, 3, 54, 3, 3, 3, 54, 54, 54, 54, 54, 54, 54, 3, 143, 164, 10, 10, 10, 10
	                  DB  10, 236, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 239, 164, 10, 10, 10, 10, 10, 10, 10, 10, 144, 143, 148, 54, 3, 3, 54, 54, 54, 54, 54
	                  DB  54, 54, 54, 3, 10, 10, 10, 10, 10, 10, 10, 236, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 240, 237, 165, 10, 10, 10, 10, 10, 10, 143, 143
	                  DB  143, 148, 54, 54, 54, 54, 54, 54, 54, 3, 147, 147, 147, 169, 10, 10, 10, 10, 10, 164, 143, 239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18
	                  DB  18, 166, 10, 10, 10, 10, 10, 143, 144, 143, 148, 3, 54, 54, 54, 54, 54, 54, 54, 3, 145, 144, 143, 10, 10, 10, 10, 10, 10, 164, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 167, 164, 10, 10, 10, 10, 146, 146, 147, 54, 54, 54, 54, 54, 54, 54, 54, 54, 3, 145, 144, 10, 10, 10, 10, 10, 10, 164, 166
	                  DB  239, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 142, 10, 143, 143, 3, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 3
	                  DB  145, 144, 10, 10, 10, 10, 10, 10, 166, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 238, 144, 143, 143, 3, 54, 54, 54
	                  DB  54, 54, 54, 54, 54, 54, 54, 79, 78, 78, 3, 3, 172, 143, 143, 143, 10, 143, 238, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 240, 144, 148, 3, 54, 54, 54, 54, 54, 54, 54, 54, 79, 79, 78, 78, 78, 78, 78, 3, 148, 3, 3, 145, 240, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 224, 148, 54, 79, 79, 79, 79, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 3, 244, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 3, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78
	                  DB  78, 78, 78, 78, 3, 246, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 245, 244, 149, 78
	                  DB  78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 148, 245, 244, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 18, 18, 244, 148, 149, 149, 3, 78, 78, 78, 78, 78, 3, 149, 149, 148, 150, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 149, 3, 3, 3, 3, 3, 148, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 224, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


	p1W               equ 41
	p1H               equ 60
	p1                DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 0, 0, 0, 0, 0, 54, 53, 53, 53, 53, 53, 53, 53, 53, 54, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 21, 137, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54
	                  DB  0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 52, 52, 52, 52, 53, 53, 53, 53, 53, 52, 53, 53, 54, 137, 138, 138, 148, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 53
	                  DB  53, 54, 0, 0, 0, 0, 54, 53, 53, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 137, 12, 12, 137, 0, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52
	                  DB  52, 53, 54, 0, 0, 0, 0, 54, 53, 52, 52, 52, 52, 52, 53, 53, 16, 16, 16, 16, 16, 16, 16, 124, 53, 148, 138, 138, 137, 0, 16, 16, 16, 16, 3, 125, 3, 53, 52, 52
	                  DB  52, 52, 53, 53, 54, 0, 0, 0, 54, 53, 52, 52, 52, 53, 53, 53, 137, 209, 184, 135, 128, 128, 128, 1, 199, 3, 53, 21, 20, 0, 16, 199, 128, 151, 3, 54, 199, 197, 53, 53
	                  DB  53, 53, 52, 52, 53, 54, 53, 0, 0, 54, 53, 52, 52, 52, 53, 53, 22, 137, 233, 17, 208, 132, 9, 9, 9, 54, 54, 53, 3, 20, 16, 16, 200, 55, 54, 23, 9, 200, 16, 53
	                  DB  53, 3, 53, 53, 52, 52, 53, 53, 0, 0, 54, 53, 53, 52, 52, 52, 53, 3, 160, 138, 137, 17, 183, 137, 43, 70, 3, 126, 198, 198, 0, 16, 188, 164, 54, 3, 70, 43, 188, 17
	                  DB  137, 137, 137, 54, 53, 52, 52, 53, 53, 0, 0, 0, 54, 53, 52, 52, 52, 53, 53, 21, 138, 12, 233, 184, 135, 172, 53, 54, 199, 16, 16, 16, 16, 198, 54, 9, 156, 9, 223, 17
	                  DB  137, 137, 137, 160, 53, 53, 52, 52, 53, 53, 0, 0, 0, 0, 53, 53, 53, 52, 52, 53, 53, 137, 137, 185, 186, 196, 54, 3, 237, 16, 16, 16, 186, 186, 186, 220, 148, 133, 128, 199
	                  DB  16, 137, 137, 21, 53, 53, 52, 52, 53, 53, 53, 0, 0, 0, 0, 0, 135, 175, 3, 53, 53, 53, 16, 185, 115, 24, 53, 26, 43, 42, 187, 16, 16, 187, 42, 42, 43, 172, 220, 187
	                  DB  185, 16, 0, 173, 53, 53, 53, 53, 53, 53, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 0, 0, 0, 126, 147, 23, 124, 24, 6, 42, 43, 6, 185, 186, 114, 6, 42, 6, 140, 23
	                  DB  24, 18, 16, 16, 52, 53, 53, 0, 0, 0, 0, 0, 0, 0, 0, 136, 21, 54, 53, 0, 0, 137, 114, 53, 53, 53, 23, 6, 42, 6, 115, 42, 6, 115, 6, 43, 43, 42, 115, 115
	                  DB  115, 125, 17, 16, 197, 53, 53, 53, 0, 137, 137, 20, 0, 0, 0, 0, 53, 53, 53, 148, 137, 137, 137, 3, 53, 3, 168, 42, 6, 42, 42, 6, 114, 17, 6, 43, 43, 43, 42, 43
	                  DB  42, 6, 17, 125, 125, 3, 53, 53, 0, 20, 138, 139, 138, 20, 0, 0, 0, 53, 3, 160, 138, 139, 138, 114, 53, 53, 124, 185, 114, 6, 42, 43, 42, 6, 17, 6, 43, 43, 42, 187
	                  DB  115, 42, 42, 148, 53, 53, 3, 137, 137, 0, 20, 138, 12, 12, 138, 137, 0, 0, 137, 138, 12, 12, 12, 12, 138, 173, 53, 53, 16, 186, 42, 43, 42, 43, 42, 187, 6, 43, 43, 42
	                  DB  6, 6, 236, 148, 53, 53, 53, 148, 137, 137, 20, 138, 12, 12, 12, 161, 138, 0, 0, 20, 138, 12, 12, 12, 12, 161, 137, 3, 53, 16, 186, 42, 43, 43, 42, 114, 6, 42, 42, 42
	                  DB  42, 42, 140, 148, 126, 125, 53, 20, 245, 137, 137, 137, 138, 12, 12, 12, 138, 137, 0, 0, 20, 138, 12, 12, 12, 12, 161, 138, 137, 137, 16, 186, 42, 43, 43, 42, 186, 6, 42, 42
	                  DB  43, 43, 42, 43, 6, 18, 16, 163, 138, 138, 137, 53, 3, 137, 6, 12, 138, 137, 137, 0, 0, 20, 137, 138, 12, 12, 12, 138, 137, 137, 138, 16, 186, 42, 43, 43, 42, 186, 6, 42
	                  DB  42, 42, 42, 43, 42, 186, 16, 21, 137, 12, 138, 137, 53, 53, 53, 138, 138, 138, 137, 0, 0, 0, 0, 0, 137, 160, 22, 161, 137, 161, 137, 160, 16, 186, 42, 42, 43, 42, 186, 6
	                  DB  42, 43, 6, 187, 43, 6, 185, 16, 24, 137, 12, 139, 137, 52, 53, 53, 53, 0, 112, 0, 0, 0, 0, 0, 0, 21, 148, 3, 53, 53, 0, 0, 0, 0, 16, 186, 42, 42, 42, 186
	                  DB  6, 43, 42, 115, 115, 42, 6, 17, 16, 42, 137, 139, 138, 138, 0, 53, 53, 53, 53, 53, 0, 0, 0, 0, 0, 53, 53, 53, 126, 125, 197, 16, 16, 16, 16, 16, 186, 115, 20, 22
	                  DB  128, 22, 24, 153, 152, 140, 114, 16, 125, 53, 53, 0, 137, 18, 16, 16, 197, 3, 3, 53, 53, 0, 0, 0, 0, 53, 53, 54, 221, 138, 164, 164, 209, 199, 199, 18, 162, 16, 199, 55
	                  DB  9, 9, 9, 9, 9, 9, 1, 16, 16, 54, 53, 53, 198, 16, 127, 127, 126, 3, 3, 161, 17, 16, 0, 0, 0, 0, 53, 3, 18, 23, 89, 91, 91, 138, 126, 55, 154, 90, 163, 177
	                  DB  55, 9, 9, 9, 9, 9, 9, 1, 16, 53, 53, 53, 125, 164, 23, 9, 56, 79, 53, 28, 26, 18, 16, 0, 0, 0, 0, 0, 16, 209, 27, 91, 90, 23, 128, 55, 56, 28, 91, 26
	                  DB  210, 163, 24, 164, 24, 20, 159, 24, 140, 115, 198, 54, 198, 17, 66, 91, 56, 152, 23, 28, 91, 90, 24, 18, 16, 0, 0, 0, 0, 16, 209, 26, 90, 90, 236, 199, 198, 22, 91, 27
	                  DB  236, 6, 42, 115, 42, 43, 42, 115, 6, 43, 42, 6, 185, 18, 25, 90, 90, 28, 21, 18, 164, 90, 91, 26, 18, 16, 0, 0, 0, 0, 16, 18, 210, 236, 26, 236, 125, 124, 242, 163
	                  DB  26, 187, 6, 137, 128, 226, 6, 42, 42, 6, 115, 43, 42, 6, 210, 26, 90, 90, 163, 163, 26, 24, 164, 26, 20, 17, 16, 0, 0, 0, 137, 138, 17, 16, 17, 18, 17, 125, 53, 53
	                  DB  222, 211, 42, 140, 9, 55, 55, 223, 6, 42, 42, 42, 43, 42, 227, 1, 128, 26, 90, 21, 17, 164, 89, 23, 209, 17, 16, 0, 0, 0, 0, 137, 137, 137, 164, 53, 125, 209, 138, 160
	                  DB  3, 124, 186, 42, 9, 9, 55, 55, 55, 127, 115, 42, 43, 43, 140, 9, 55, 55, 223, 25, 20, 16, 17, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 137, 160, 3, 53, 3, 138, 12
	                  DB  139, 160, 199, 186, 42, 9, 128, 226, 234, 235, 128, 127, 187, 42, 43, 42, 22, 9, 9, 55, 105, 17, 16, 53, 54, 54, 0, 137, 20, 20, 0, 0, 0, 0, 0, 53, 53, 54, 137, 12
	                  DB  12, 139, 160, 16, 187, 42, 128, 21, 66, 90, 90, 24, 20, 18, 186, 42, 42, 6, 23, 9, 9, 55, 199, 18, 3, 53, 53, 148, 138, 138, 138, 137, 0, 0, 0, 0, 53, 53, 3, 137
	                  DB  12, 12, 139, 137, 16, 186, 6, 162, 24, 24, 24, 24, 24, 27, 26, 21, 139, 115, 114, 6, 23, 24, 18, 16, 138, 137, 148, 53, 20, 138, 12, 161, 137, 0, 0, 0, 137, 137, 136, 210
	                  DB  137, 6, 139, 138, 137, 0, 16, 232, 138, 18, 20, 163, 162, 163, 164, 23, 25, 89, 163, 115, 115, 115, 115, 186, 16, 65, 137, 137, 0, 20, 138, 139, 138, 137, 0, 0, 0, 137, 137, 137
	                  DB  0, 0, 137, 160, 137, 0, 0, 0, 16, 17, 23, 89, 24, 162, 27, 26, 23, 164, 162, 163, 164, 115, 185, 16, 16, 0, 0, 0, 0, 137, 0, 137, 137, 137, 0, 0, 0, 0, 137, 137
	                  DB  137, 137, 0, 0, 0, 0, 0, 0, 16, 209, 25, 90, 90, 25, 24, 66, 90, 90, 89, 162, 18, 235, 18, 128, 150, 150, 151, 0, 0, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  137, 137, 137, 0, 151, 0, 0, 151, 150, 16, 233, 90, 90, 163, 25, 30, 30, 24, 23, 91, 89, 26, 24, 151, 54, 79, 78, 9, 150, 1, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 137, 137, 137, 0, 151, 151, 128, 151, 151, 151, 174, 89, 90, 26, 21, 26, 29, 22, 162, 27, 24, 90, 27, 173, 54, 53, 54, 79, 9, 151, 150, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 151, 150, 150, 128, 151, 9, 79, 24, 27, 90, 89, 162, 235, 24, 89, 26, 151, 24, 27, 172, 54, 54, 54, 149, 150, 151, 151, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 79, 79, 149, 149, 54, 78, 54, 172, 27, 89, 89, 89, 89, 26, 150, 149, 54, 172, 78, 78, 54, 54, 148, 150, 151, 151, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 151, 54, 79, 53, 54, 150, 54, 78, 78, 56, 173, 26, 27, 24, 54, 54, 54, 54, 149, 79, 54, 54, 78, 77, 56, 128, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 151, 149, 54, 54, 149, 54, 54, 78, 77, 77, 79, 150, 54, 54, 54, 54, 54, 150, 149, 54, 54, 54, 78, 79, 173, 128, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 172, 148, 54, 54, 54, 9, 54, 54, 53, 77, 77, 79, 54, 54, 54, 54, 9, 54, 54, 9, 54, 54, 53, 77, 79, 128, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 56, 79, 54, 54, 54, 78, 9, 54, 54, 53, 77, 77, 78, 53, 54, 54, 54, 54, 53, 78, 173, 149, 54, 53, 9, 151, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 9, 9, 54, 54, 54, 53, 54, 54, 149, 54, 78, 77, 78, 54, 54, 54, 78, 77, 77, 173, 149, 54, 54, 54, 151, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 151, 150, 54, 54, 54, 54, 54, 150, 54, 54, 78, 77, 53, 54, 78, 77, 77, 77, 173, 54, 149, 150, 150, 151
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 9, 78, 54, 54, 54, 78, 54, 54, 54, 78, 77, 77, 78, 77, 77, 77, 77, 173, 54, 149, 151, 151
	                  DB  151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 9, 77, 78, 54, 54, 78, 77, 53, 54, 53, 77, 77, 78, 9, 54, 78, 77, 173, 54, 149, 151
	                  DB  151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 150, 9, 77, 54, 148, 78, 77, 77, 9, 54, 53, 77, 77, 78, 149, 148, 78, 173, 54, 149
	                  DB  151, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 173, 78, 78, 149, 150, 79, 77, 77, 9, 149, 54, 78, 77, 78, 54, 149, 151, 54
	                  DB  149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 172, 79, 173, 128, 150, 79, 77, 79, 149, 151, 172, 78, 78, 77, 53, 149
	                  DB  54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 0, 0, 151, 56, 78, 56, 128, 151, 151, 149, 79, 77
	                  DB  53, 54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 0, 0, 0, 151, 151, 151, 0, 0, 0, 105, 150
	                  DB  79, 77, 54, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0
	                  DB  105, 151, 56, 54, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0
	                  DB  0, 0, 0, 128, 149, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 128, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	p2W               equ 41
	p2H               equ 60
	p2                DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 18, 4, 184, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 186, 112, 184, 16, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 113, 188, 188, 16, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 112, 184, 16, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 114, 43, 116, 17, 16, 0, 0, 0, 0, 0, 16, 186, 114, 186, 16, 16, 0, 0, 0, 0, 0
	                  DB  16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 185, 4, 205, 17, 16, 0, 0, 0, 0, 0, 16, 114, 6, 113, 184, 16, 0, 0, 0, 0
	                  DB  0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 109, 130, 16, 16, 0, 0, 0, 0, 0, 16, 17, 228, 111, 184, 16, 0, 0, 0
	                  DB  0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 129, 9, 179, 16, 0, 0, 0, 0, 0, 0, 16, 107, 106, 16, 16, 0, 0
	                  DB  0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 129, 57, 149, 196, 16, 16, 0, 16, 16, 16, 198, 150, 200, 16, 16, 0
	                  DB  0, 0, 0, 16, 129, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 247, 79, 3, 124, 125, 196, 16, 115, 187, 198, 3, 53, 124, 198, 16
	                  DB  0, 0, 16, 16, 130, 131, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 197, 124, 3, 3, 3, 3, 124, 236, 6, 116, 148, 54, 3, 3, 124
	                  DB  198, 16, 16, 106, 131, 131, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 196, 3, 3, 54, 3, 3, 148, 140, 139, 140, 25, 148, 3, 3
	                  DB  3, 124, 18, 106, 34, 132, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 203, 196, 3, 54, 54, 54, 54, 24, 6, 22, 159, 6, 164, 3
	                  DB  54, 3, 3, 196, 179, 130, 201, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 156, 156, 196, 3, 54, 54, 53, 53, 72, 6, 158, 64, 159, 6
	                  DB  73, 54, 54, 3, 196, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 58, 9, 128, 125, 3, 53, 53, 53, 72, 6, 207, 158, 22
	                  DB  6, 73, 53, 54, 125, 195, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 58, 57, 34, 105, 125, 53, 53, 53, 72, 6, 23, 23
	                  DB  20, 6, 73, 53, 125, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 156, 57, 57, 34, 105, 3, 53, 53, 72, 6, 23
	                  DB  28, 23, 6, 73, 3, 198, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 156, 57, 57, 57, 151, 3, 53, 72, 6
	                  DB  20, 23, 22, 6, 73, 126, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 156, 57, 58, 156, 126, 53, 72
	                  DB  6, 21, 24, 22, 6, 140, 128, 106, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 129, 156, 57, 151, 3
	                  DB  72, 6, 23, 27, 22, 43, 115, 107, 34, 178, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 129, 201
	                  DB  125, 73, 140, 154, 22, 20, 6, 116, 107, 107, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 16, 16
	                  DB  16, 197, 152, 132, 131, 131, 131, 20, 115, 140, 209, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 16, 0
	                  DB  0, 0, 16, 106, 34, 57, 57, 57, 129, 115, 42, 114, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 56, 131, 16
	                  DB  16, 16, 16, 129, 57, 34, 57, 28, 81, 27, 162, 186, 107, 105, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 20, 58, 57
	                  DB  107, 17, 16, 179, 34, 58, 81, 24, 21, 22, 162, 25, 20, 107, 34, 179, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 187, 43, 65
	                  DB  34, 25, 43, 137, 16, 107, 58, 26, 20, 245, 136, 4, 136, 25, 65, 12, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 203, 24
	                  DB  6, 177, 115, 66, 58, 130, 22, 78, 53, 148, 19, 111, 4, 136, 3, 28, 138, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 212, 43
	                  DB  6, 18, 16, 17, 153, 58, 81, 26, 21, 148, 148, 21, 21, 160, 148, 148, 26, 21, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 203, 57
	                  DB  26, 116, 16, 0, 16, 21, 28, 78, 3, 148, 24, 28, 28, 28, 27, 23, 148, 220, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 203, 57
	                  DB  58, 24, 17, 16, 0, 16, 17, 17, 17, 17, 22, 58, 57, 34, 129, 200, 17, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 177, 34, 57
	                  DB  57, 58, 156, 16, 16, 0, 16, 16, 16, 16, 16, 17, 114, 6, 136, 107, 34, 106, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 200, 57
	                  DB  34, 57, 34, 131, 16, 0, 0, 0, 0, 0, 16, 16, 177, 178, 18, 155, 57, 58, 57, 129, 178, 177, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18
	                  DB  156, 34, 24, 202, 156, 201, 16, 0, 0, 0, 16, 17, 178, 106, 34, 34, 57, 58, 58, 58, 57, 57, 179, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  16, 17, 201, 131, 16, 226, 130, 16, 0, 0, 16, 17, 107, 34, 106, 106, 34, 57, 57, 57, 58, 58, 57, 201, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 16, 16, 16, 17, 16, 17, 17, 16, 0, 16, 178, 107, 34, 34, 106, 131, 57, 57, 156, 107, 34, 57, 203, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 16, 106, 34, 34, 131, 156, 57, 58, 164, 212, 201, 131, 34, 131, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 34, 34, 9, 58, 132, 160, 139, 129, 156, 34, 57, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 34, 34, 57, 58, 156, 129, 156, 57, 57, 57, 57, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 178, 107, 34, 34, 57, 58, 57, 57, 58, 34, 57, 58, 57, 202, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 106, 34, 34, 34, 57, 58, 58, 58, 57, 57, 58, 132, 178, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 156, 34, 34, 34, 34, 57, 58, 58, 58, 58, 57, 106, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 131, 131, 132, 57, 57, 57, 57, 58, 58, 57, 57, 57, 203, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 131, 203, 16, 201, 24, 57, 57, 57, 132, 130, 129, 34, 34, 156, 201, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 129, 156, 177, 106, 178, 130, 9, 106, 106, 177, 202, 18, 107, 34, 57, 227, 16, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 129, 9, 107, 34, 106, 130, 131, 16, 16, 16, 156, 130, 178, 34, 57, 227, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 201, 156, 57, 34, 34, 106, 130, 131, 16, 0, 16, 227, 131, 18, 107, 57, 227, 16, 16, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 34, 34, 34, 132, 131, 227, 16, 0, 0, 16, 156, 130, 178, 34, 156, 201, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 228, 57, 34, 34, 34, 57, 154, 16, 0, 0, 0, 16, 227, 155, 18, 106, 57, 228, 16
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 6, 66, 26, 34, 34, 156, 226, 16, 0, 0, 0, 0, 16, 156, 130, 107, 57, 227
	                  DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 188, 43, 43, 25, 34, 57, 131, 16, 0, 0, 0, 0, 0, 16, 227, 131, 34, 57
	                  DB  227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 189, 139, 57, 34, 57, 24, 202, 16, 0, 0, 0, 0, 0, 0, 16, 203, 9
	                  DB  58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 202, 57, 34, 58, 131, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                  DB  155, 58, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 57, 156, 201, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 201, 156, 227, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 58, 156, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 16, 200, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 156, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	fireball1W        equ 32
	fireball1H        equ 32
	fireball1         DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 16, 4, 158, 148, 148, 160, 4, 112, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 4, 54
	                  DB  54, 54, 54, 54, 54, 54, 54, 54, 54, 22, 173, 4, 111, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  54, 54, 54, 54, 54, 54, 149, 4, 4, 4, 4, 111, 0, 0, 0, 0, 0, 0, 0, 16, 159, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54
	                  DB  54, 54, 54, 53, 14, 0, 0, 0, 0, 0, 0, 4, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 112, 0
	                  DB  0, 0, 112, 148, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54, 161, 4, 0, 0, 0, 112, 54, 54, 52, 52, 52
	                  DB  52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 54, 4, 112, 0, 6, 0, 0, 0, 0, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  52, 52, 52, 52, 52, 52, 52, 54, 54, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54
	                  DB  112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 54, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54, 22, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 4, 54, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 54, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 54, 54
	                  DB  52, 52, 52, 52, 52, 52, 54, 54, 54, 154, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 3, 54, 54, 54, 54, 54, 53, 3, 112
	                  DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 4, 112, 112, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	fireball2W        equ 32
	fireball2H        equ 32
	fireball2         DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 57, 0, 0, 0, 0, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57
	                  DB  57, 57, 58, 58, 58, 57, 57, 57, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 57, 57, 58
	                  DB  81, 58, 58, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 57, 9, 9, 58, 58, 58, 81, 58, 58, 57, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 57, 57, 58, 58, 57, 57, 57, 9, 9, 9, 9, 57, 57, 58, 58, 58, 57, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 58, 58, 57, 57, 58, 58, 57, 57, 9, 9, 9, 9, 9, 9, 9, 57, 58, 58, 58, 58, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57
	                  DB  56, 9, 9, 9, 9, 9, 9, 9, 9, 58, 58, 58, 81, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB  9, 9, 9, 57, 81, 81, 58, 58, 0, 0, 0, 0, 0, 0, 58, 81, 58, 81, 81, 81, 58, 58, 57, 56, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 58, 58, 58, 81
	                  DB  0, 0, 0, 58, 81, 58, 58, 81, 81, 58, 58, 58, 58, 58, 57, 57, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 56, 57, 58, 58, 81, 0, 0, 58, 58, 81, 81, 81, 58
	                  DB  58, 58, 58, 58, 58, 57, 57, 57, 9, 9, 9, 9, 9, 9, 9, 56, 57, 9, 9, 9, 57, 58, 58, 81, 0, 0, 58, 58, 81, 81, 81, 58, 58, 58, 58, 58, 58, 58, 57, 57
	                  DB  9, 9, 9, 9, 9, 9, 9, 57, 57, 57, 9, 9, 57, 58, 81, 58, 0, 0, 58, 58, 58, 58, 58, 81, 58, 58, 58, 58, 58, 58, 58, 56, 9, 9, 9, 9, 9, 57, 57, 57
	                  DB  57, 57, 56, 9, 9, 58, 81, 58, 0, 0, 0, 0, 0, 0, 58, 81, 81, 81, 81, 58, 58, 58, 58, 57, 9, 9, 9, 9, 9, 57, 57, 57, 57, 57, 56, 9, 56, 58, 81, 81
	                  DB  0, 0, 0, 0, 0, 0, 0, 58, 81, 58, 58, 58, 58, 58, 57, 57, 56, 9, 9, 9, 57, 57, 57, 57, 9, 9, 9, 9, 57, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 58
	                  DB  81, 58, 58, 58, 58, 58, 58, 56, 9, 9, 9, 57, 57, 9, 9, 9, 9, 9, 9, 9, 57, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 58, 57, 57, 58, 58, 57
	                  DB  57, 56, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 58, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 58, 58, 58, 57, 9, 9, 9, 9, 9, 9
	                  DB  9, 9, 57, 57, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 58, 57, 57, 9, 9, 9, 9, 9, 9, 57, 58, 81, 58, 58, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 9, 9, 9, 9, 9, 58, 58, 58, 58, 81, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 57, 57, 57, 58, 58, 58, 58, 58, 81, 81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 58, 81, 81
	                  DB  81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	coinW             equ 10
	coinH             equ 10
	coin              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 210, 211, 211, 210, 18, 0, 0, 0, 18, 139, 65, 66, 66, 65, 139, 18, 0, 0, 210, 65, 66, 43, 43, 66, 140, 187, 0
	                  DB  0, 211, 66, 43, 43, 43, 43, 42, 187, 0, 0, 211, 66, 43, 43, 43, 43, 42, 187, 0, 0, 210, 65, 66, 43, 43, 43, 140, 187, 0, 0, 18, 139, 140, 42, 42, 140, 139, 18, 0
	                  DB  0, 0, 18, 187, 187, 187, 187, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	healthW           equ 20
	healthH           equ 20
	health            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 2, 2, 2, 2, 2, 2, 31, 31, 31, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0
	                  DB  0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	speedW            equ 20
	speedH            equ 20
	speed             DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 14, 14, 44, 44, 14, 44, 14, 14, 44, 44, 44, 0, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 31, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 31, 31, 31, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 31, 31, 44, 44, 14, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 44, 44, 31, 31, 14, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 44, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 31, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                  DB  0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	damageW           equ 20
	damageH           equ 20
	damage            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 31, 31, 31, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 31, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 41, 31, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 31, 40, 31, 40, 31, 40, 40, 40, 40, 40, 0, 0, 0
	                  DB  0, 0, 40, 40, 40, 40, 40, 31, 40, 31, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 40, 0, 0, 0
	                  DB  0, 0, 0, 41, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
					  
	freezeW           equ 17
	freezeH           equ 15
	freeze            DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9, 31, 9, 9
	                  DB  9, 31, 31, 31, 9, 9, 9, 31, 9, 9, 0, 0, 9, 9, 9, 31, 9, 9, 9, 31, 9, 9, 9, 31, 9, 9, 9, 0, 0, 9, 9, 9, 9, 31, 9, 9, 31, 9, 9, 31
	                  DB  9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 0, 0, 9, 9, 31, 9, 9, 9, 31, 31, 31, 9, 9, 9, 31, 9, 9, 0, 0
	                  DB  9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 0, 0, 9, 9, 31, 9, 9, 9, 31, 31, 31, 9, 9, 9, 31, 9, 9, 0, 0, 9, 9, 9, 9, 9, 31
	                  DB  31, 31, 31, 31, 9, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 30, 9, 9, 31, 9, 9, 31, 9, 9, 9, 9, 0, 0, 9, 9, 9, 31, 9, 9, 9, 31, 9, 9, 9, 31
	                  DB  9, 9, 9, 0, 0, 9, 9, 31, 9, 9, 9, 31, 31, 31, 9, 9, 9, 31, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	decscoreW         equ 20
	decscoreH         equ 20
	decscore          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 13, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 36, 36, 36, 36, 36, 31, 31, 31, 31, 31, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 36, 36, 31, 31, 31, 36, 36, 31, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 36, 31, 36, 36, 36, 31, 36, 31, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 36, 31, 36, 36, 36, 31, 36, 31, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 36, 31, 36, 36, 36, 31, 36, 31, 36, 31, 31, 31, 31, 31, 36, 0, 0, 0, 0, 0, 36, 31, 36, 36, 36, 31, 36, 31, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 36, 36, 31, 31, 31, 36, 36, 31, 31, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 31, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0
	                  DB  0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	p1freeze          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 0, 0, 0, 0, 0, 54, 53, 53, 53, 53, 53, 53, 53, 53, 54, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 54, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 21, 137, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54
	                  DB  0, 0, 0, 0, 0, 0, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 137, 138, 138, 3, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  53, 54, 0, 0, 0, 0, 54, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 160, 12, 12, 21, 0, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52
	                  DB  52, 52, 54, 0, 0, 0, 0, 54, 52, 52, 52, 52, 52, 52, 52, 53, 16, 16, 16, 16, 16, 16, 16, 3, 52, 3, 138, 138, 137, 0, 16, 16, 16, 16, 53, 3, 52, 52, 52, 52
	                  DB  52, 52, 52, 52, 54, 0, 0, 0, 54, 52, 52, 52, 52, 52, 52, 53, 137, 209, 184, 135, 52, 52, 52, 52, 124, 52, 53, 21, 20, 0, 16, 126, 3, 54, 53, 53, 125, 124, 52, 52
	                  DB  52, 52, 52, 52, 52, 54, 53, 0, 0, 54, 52, 52, 52, 52, 52, 53, 148, 137, 233, 17, 208, 53, 52, 52, 52, 52, 52, 53, 3, 20, 16, 16, 125, 54, 52, 25, 53, 125, 16, 53
	                  DB  53, 53, 53, 52, 52, 52, 52, 53, 0, 0, 54, 53, 52, 52, 52, 52, 52, 53, 160, 138, 137, 17, 183, 137, 43, 70, 52, 53, 198, 198, 0, 16, 188, 164, 52, 52, 70, 43, 188, 17
	                  DB  137, 137, 137, 53, 52, 52, 52, 52, 53, 0, 0, 0, 54, 52, 52, 52, 52, 52, 52, 148, 138, 12, 233, 184, 135, 52, 52, 52, 3, 16, 16, 16, 16, 125, 52, 53, 24, 3, 125, 17
	                  DB  137, 137, 137, 160, 53, 52, 52, 52, 52, 53, 0, 0, 0, 0, 53, 52, 52, 52, 52, 52, 53, 137, 137, 185, 186, 3, 52, 52, 147, 17, 16, 16, 186, 187, 186, 3, 52, 155, 149, 126
	                  DB  16, 137, 137, 172, 53, 52, 52, 52, 52, 53, 53, 0, 0, 0, 0, 0, 135, 175, 53, 52, 53, 53, 16, 185, 147, 25, 52, 51, 51, 52, 187, 16, 16, 187, 51, 52, 51, 3, 3, 187
	                  DB  185, 16, 0, 173, 53, 52, 52, 52, 53, 53, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 0, 0, 0, 125, 3, 24, 53, 3, 3, 52, 52, 3, 185, 186, 145, 3, 52, 3, 172, 25
	                  DB  24, 18, 16, 16, 52, 53, 53, 0, 0, 0, 0, 0, 0, 0, 0, 136, 21, 54, 53, 0, 0, 137, 114, 53, 52, 52, 24, 3, 51, 148, 148, 51, 3, 148, 51, 52, 52, 51, 148, 148
	                  DB  148, 3, 197, 16, 197, 53, 53, 53, 0, 137, 137, 20, 0, 0, 0, 0, 53, 53, 53, 148, 137, 137, 137, 53, 52, 52, 148, 51, 3, 52, 52, 3, 147, 17, 3, 52, 52, 52, 52, 52
	                  DB  52, 148, 17, 3, 124, 3, 53, 53, 0, 20, 138, 139, 138, 20, 0, 0, 0, 53, 3, 160, 138, 139, 138, 114, 52, 52, 3, 185, 169, 3, 52, 52, 52, 51, 17, 3, 52, 52, 51, 143
	                  DB  148, 52, 51, 53, 52, 53, 3, 137, 137, 0, 20, 138, 12, 12, 138, 137, 0, 0, 137, 138, 12, 12, 12, 12, 138, 3, 53, 53, 16, 186, 52, 52, 52, 52, 52, 211, 3, 52, 52, 52
	                  DB  3, 3, 143, 51, 52, 53, 53, 148, 137, 137, 20, 138, 12, 12, 12, 161, 138, 0, 0, 20, 138, 12, 12, 12, 12, 161, 137, 3, 53, 16, 186, 52, 52, 52, 52, 146, 3, 52, 52, 52
	                  DB  52, 52, 74, 3, 3, 3, 53, 20, 245, 137, 137, 137, 138, 12, 12, 12, 138, 137, 0, 0, 20, 138, 12, 12, 12, 12, 161, 138, 137, 137, 16, 186, 52, 52, 52, 52, 186, 3, 52, 52
	                  DB  52, 52, 52, 52, 3, 18, 16, 163, 138, 138, 137, 53, 3, 137, 6, 12, 138, 137, 137, 0, 0, 20, 137, 138, 12, 12, 12, 138, 137, 137, 138, 16, 186, 52, 52, 52, 52, 186, 3, 52
	                  DB  52, 52, 51, 52, 51, 186, 16, 21, 137, 12, 138, 137, 53, 52, 53, 138, 138, 138, 137, 0, 0, 0, 0, 0, 137, 172, 3, 3, 137, 161, 137, 160, 16, 186, 51, 52, 52, 52, 186, 3
	                  DB  52, 52, 3, 212, 52, 51, 185, 16, 24, 137, 12, 139, 137, 52, 52, 52, 53, 0, 112, 0, 0, 0, 0, 0, 0, 21, 51, 52, 52, 53, 0, 0, 0, 0, 16, 187, 51, 51, 51, 186
	                  DB  3, 52, 51, 148, 148, 52, 148, 17, 16, 42, 137, 139, 138, 138, 0, 53, 52, 52, 53, 53, 0, 0, 0, 0, 0, 53, 52, 52, 3, 53, 3, 16, 16, 16, 16, 16, 186, 148, 3, 3
	                  DB  53, 3, 26, 51, 53, 3, 147, 16, 125, 53, 53, 0, 137, 18, 16, 16, 196, 52, 52, 52, 53, 0, 0, 0, 0, 53, 52, 52, 124, 172, 172, 172, 243, 3, 3, 219, 3, 16, 3, 52
	                  DB  53, 53, 53, 53, 53, 53, 52, 16, 16, 53, 52, 52, 198, 16, 53, 52, 52, 52, 52, 3, 17, 16, 0, 0, 0, 0, 53, 52, 217, 24, 89, 91, 91, 172, 52, 53, 52, 75, 3, 3
	                  DB  52, 53, 53, 53, 53, 53, 53, 52, 16, 53, 52, 52, 51, 3, 24, 52, 52, 52, 52, 75, 25, 18, 16, 0, 0, 0, 0, 0, 16, 146, 27, 91, 90, 24, 53, 52, 52, 11, 75, 74
	                  DB  146, 3, 51, 51, 51, 3, 3, 51, 51, 3, 124, 53, 198, 17, 27, 91, 52, 52, 3, 75, 91, 90, 25, 18, 16, 0, 0, 0, 0, 16, 147, 26, 90, 90, 148, 3, 53, 51, 75, 74
	                  DB  148, 51, 51, 148, 51, 52, 51, 3, 3, 52, 52, 3, 185, 18, 25, 90, 90, 75, 3, 218, 24, 90, 91, 26, 146, 16, 0, 0, 0, 0, 16, 18, 147, 148, 25, 147, 53, 53, 147, 3
	                  DB  74, 145, 51, 148, 52, 3, 51, 52, 52, 3, 148, 52, 52, 3, 146, 26, 90, 90, 172, 172, 26, 25, 25, 25, 148, 17, 16, 0, 0, 0, 137, 138, 17, 16, 17, 18, 17, 125, 52, 52
	                  DB  125, 146, 52, 51, 52, 53, 53, 53, 3, 52, 52, 52, 52, 51, 3, 52, 53, 26, 90, 148, 219, 25, 28, 25, 240, 17, 16, 0, 0, 0, 0, 137, 137, 137, 164, 53, 125, 209, 138, 160
	                  DB  52, 52, 187, 51, 52, 53, 53, 53, 52, 53, 3, 52, 52, 52, 51, 52, 53, 53, 53, 26, 148, 16, 17, 18, 17, 16, 0, 0, 0, 0, 0, 0, 0, 137, 160, 3, 53, 3, 138, 12
	                  DB  139, 161, 199, 213, 51, 52, 52, 3, 148, 148, 52, 53, 145, 52, 52, 51, 52, 53, 53, 53, 52, 124, 16, 53, 53, 54, 0, 137, 20, 20, 0, 0, 0, 0, 0, 53, 53, 54, 137, 12
	                  DB  12, 139, 160, 16, 213, 51, 52, 51, 74, 75, 75, 51, 148, 147, 186, 51, 52, 51, 52, 53, 53, 52, 53, 18, 53, 52, 52, 148, 138, 138, 138, 137, 0, 0, 0, 0, 53, 53, 3, 137
	                  DB  12, 12, 139, 160, 16, 186, 3, 3, 3, 51, 51, 51, 51, 74, 74, 3, 3, 3, 148, 3, 51, 52, 3, 16, 138, 137, 3, 53, 20, 138, 12, 161, 137, 0, 0, 0, 137, 137, 136, 210
	                  DB  137, 6, 139, 138, 137, 0, 16, 19, 3, 220, 148, 3, 3, 3, 3, 3, 74, 75, 3, 3, 3, 3, 3, 186, 16, 65, 137, 137, 0, 20, 138, 139, 138, 137, 0, 0, 0, 137, 137, 137
	                  DB  0, 0, 137, 160, 137, 0, 0, 0, 16, 218, 3, 74, 51, 3, 74, 11, 3, 3, 3, 3, 3, 3, 185, 16, 16, 0, 0, 0, 0, 137, 0, 137, 137, 137, 0, 0, 0, 0, 137, 137
	                  DB  137, 137, 0, 0, 0, 0, 0, 0, 16, 240, 74, 75, 75, 74, 51, 74, 75, 75, 74, 3, 220, 148, 124, 52, 52, 52, 151, 0, 0, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  137, 137, 137, 0, 151, 0, 0, 3, 53, 16, 148, 75, 74, 3, 52, 76, 99, 51, 3, 75, 75, 74, 51, 52, 52, 52, 52, 52, 53, 1, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 137, 137, 137, 0, 52, 3, 128, 3, 52, 52, 52, 75, 75, 74, 3, 11, 11, 3, 3, 11, 52, 75, 75, 52, 52, 52, 52, 52, 52, 53, 150, 137, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 52, 52, 53, 128, 53, 52, 52, 52, 11, 75, 74, 3, 3, 3, 74, 11, 52, 52, 11, 52, 52, 52, 52, 52, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 52, 52, 52, 52, 52, 52, 52, 52, 52, 11, 75, 75, 74, 75, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 151, 151, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 11, 11, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 128, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 151, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53
	                  DB  53, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  53, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 52, 52, 128, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52
	                  DB  52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 52, 151, 0, 0, 53, 52, 52, 52, 53, 151, 52, 52, 52, 52
	                  DB  52, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 53, 151, 0, 0, 0, 3, 52, 52, 0, 0, 0, 105, 52
	                  DB  52, 52, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 52, 0, 0, 0, 0
	                  DB  105, 53, 52, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0
	                  DB  0, 0, 0, 150, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 128, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	p2freeze          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 125, 125, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 125, 125, 125, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 186, 18, 4, 184, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 125, 124, 125, 196, 0, 0, 0, 0, 0, 0, 0, 0, 196, 124, 147, 148, 172, 148, 16, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 148, 148, 146, 146, 16, 0, 0, 0, 0, 0, 0, 0, 196, 123, 147, 148, 148, 17, 16, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 147, 72, 168, 125, 16, 0, 0, 0, 0, 0, 16, 147, 170, 147, 125, 16, 0, 0, 0, 0, 0
	                  DB  16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 148, 25, 3, 123, 196, 0, 0, 0, 0, 0, 196, 147, 140, 148, 149, 16, 0, 0, 0, 0
	                  DB  0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 149, 172, 148, 125, 17, 0, 0, 0, 0, 0, 18, 124, 3, 148, 124, 17, 0, 0, 0
	                  DB  0, 16, 17, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 195, 3, 79, 124, 16, 0, 0, 0, 0, 0, 0, 196, 129, 150, 125, 16, 0, 0
	                  DB  0, 0, 16, 125, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 3, 79, 54, 124, 197, 16, 0, 16, 197, 195, 124, 148, 124, 198, 16, 0
	                  DB  0, 0, 0, 18, 148, 124, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 124, 53, 3, 3, 124, 124, 197, 146, 146, 124, 3, 53, 3, 124, 16
	                  DB  0, 0, 17, 196, 148, 148, 124, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 3, 3, 3, 3, 3, 148, 164, 165, 148, 3, 3, 3, 3
	                  DB  124, 197, 196, 150, 148, 148, 124, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 125, 124, 3, 3, 3, 3, 3, 3, 23, 172, 172, 23, 3, 54, 3
	                  DB  3, 3, 124, 150, 9, 172, 124, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 124, 3, 3, 53, 54, 54, 72, 164, 3, 25, 172, 23, 3
	                  DB  54, 3, 3, 124, 150, 148, 124, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 79, 79, 124, 3, 3, 53, 53, 53, 72, 164, 25, 26, 172, 164
	                  DB  73, 53, 54, 3, 124, 125, 196, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 148, 78, 79, 3, 3, 3, 53, 53, 53, 72, 164, 148, 25, 148
	                  DB  164, 73, 53, 54, 3, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 3, 79, 79, 9, 124, 3, 53, 53, 53, 72, 164, 3, 3
	                  DB  148, 164, 73, 53, 3, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 79, 56, 9, 3, 3, 53, 53, 72, 164, 3
	                  DB  28, 3, 164, 73, 3, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 79, 79, 79, 3, 3, 53, 72, 23
	                  DB  148, 25, 148, 164, 73, 124, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 125, 3, 79, 78, 3, 124, 53, 72
	                  DB  164, 148, 26, 148, 164, 166, 150, 150, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 3, 79, 3, 3
	                  DB  72, 164, 3, 28, 25, 164, 168, 1, 34, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 124, 3, 124
	                  DB  124, 73, 23, 3, 3, 3, 24, 168, 129, 129, 124, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 16, 17
	                  DB  17, 124, 3, 9, 131, 131, 131, 3, 170, 25, 148, 196, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 124, 196, 16, 0
	                  DB  0, 0, 197, 128, 34, 57, 57, 57, 148, 172, 25, 148, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 56, 148, 125
	                  DB  16, 16, 197, 148, 56, 34, 56, 103, 78, 78, 172, 147, 150, 151, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 3, 57, 57
	                  DB  151, 123, 125, 125, 9, 57, 78, 26, 148, 148, 25, 26, 148, 129, 34, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 148, 73, 74
	                  DB  34, 79, 72, 172, 125, 151, 57, 27, 148, 148, 172, 172, 172, 27, 26, 25, 148, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 148, 26
	                  DB  73, 124, 147, 25, 56, 148, 3, 78, 53, 3, 148, 172, 24, 148, 3, 75, 148, 196, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 148, 73
	                  DB  73, 123, 16, 195, 3, 57, 78, 27, 148, 3, 3, 148, 148, 148, 3, 3, 78, 148, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 148, 79
	                  DB  78, 172, 196, 0, 198, 148, 103, 78, 3, 3, 26, 103, 103, 28, 28, 3, 3, 124, 197, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 125, 148, 79
	                  DB  79, 79, 123, 196, 0, 17, 124, 124, 124, 124, 25, 78, 9, 9, 3, 124, 124, 125, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 125, 79, 79
	                  DB  79, 79, 9, 196, 16, 0, 16, 16, 16, 16, 16, 196, 148, 24, 148, 148, 9, 148, 196, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 124, 79
	                  DB  9, 79, 54, 54, 196, 0, 0, 0, 0, 0, 16, 16, 125, 124, 124, 3, 78, 78, 9, 3, 124, 197, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 124
	                  DB  9, 54, 79, 148, 148, 124, 16, 0, 0, 0, 16, 125, 124, 148, 9, 9, 79, 78, 78, 78, 79, 79, 124, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196
	                  DB  196, 125, 124, 148, 196, 148, 148, 196, 0, 0, 16, 125, 148, 9, 148, 148, 9, 56, 79, 79, 78, 78, 79, 124, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 16, 16, 196, 196, 16, 17, 125, 197, 0, 16, 125, 148, 9, 9, 3, 54, 56, 79, 79, 148, 79, 79, 3, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 17, 124, 9, 9, 54, 3, 79, 79, 24, 146, 124, 9, 9, 3, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 148, 9, 9, 9, 78, 79, 148, 171, 3, 79, 9, 79, 78, 3, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 148, 9, 9, 56, 78, 79, 3, 79, 79, 79, 56, 78, 78, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 9, 9, 9, 78, 78, 79, 78, 78, 56, 79, 78, 79, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 195, 124, 9, 9, 9, 78, 78, 78, 78, 79, 79, 78, 54, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 79, 9, 9, 9, 9, 79, 78, 78, 78, 78, 79, 3, 198, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 3, 79, 79, 79, 79, 78, 78, 78, 79, 79, 79, 3, 17, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 3, 3, 125, 124, 79, 79, 79, 79, 79, 3, 3, 9, 56, 54, 124, 16, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 3, 124, 148, 124, 3, 79, 148, 148, 124, 124, 124, 148, 9, 79, 3, 17, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 3, 79, 9, 9, 148, 3, 3, 125, 197, 125, 3, 3, 124, 9, 79, 3, 17, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 124, 79, 79, 9, 9, 148, 3, 3, 197, 0, 16, 3, 3, 124, 148, 79, 3, 198, 16, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 78, 9, 9, 9, 54, 3, 3, 16, 0, 0, 196, 3, 3, 124, 9, 79, 124, 16, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 3, 79, 9, 9, 9, 79, 3, 196, 0, 0, 0, 16, 3, 3, 124, 149, 79, 3, 17
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 147, 23, 25, 79, 9, 9, 79, 148, 16, 0, 0, 0, 0, 196, 3, 3, 148, 79, 3
	                  DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 146, 72, 24, 79, 9, 78, 3, 196, 0, 0, 0, 0, 0, 16, 3, 3, 9, 79
	                  DB  3, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 243, 172, 79, 9, 56, 79, 124, 16, 0, 0, 0, 0, 0, 0, 16, 3, 79
	                  DB  78, 3, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 79, 9, 78, 3, 196, 0, 0, 0, 0, 0, 0, 0, 0, 196
	                  DB  3, 78, 3, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 78, 78, 79, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  16, 124, 79, 3, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 78, 79, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 16, 124, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 79, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 125, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 125, 125, 16, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


	earthx            dw  160D
	earthy            dw  150D
	player1x          dw  -60D
	player1y          dw  300D
	player2y          dw  300D
	player2x          dw  215D
	fireball1x        dw  ?
	fireball1y        dw  ?
	fireball2x        dw  ?
	fireball2y        dw  ?
	coinx             dw  050d,0100d,120d,0150d,0200d,230d,260d,0290d
	coiny             dw  1d,1d,1d,1d,1d,1d,1d,1d
	healthpowerx      dw  60
	healthpowery      dw  1
	speedpowerx       dw  30
	speedpowery       dw  1
	damagepowerx      dw  90
	damagepowery      dw  1
	freezepowerx      dw  110
	freezepowery      dw  1
	decscorepowerx    dw  130
	decscorepowery    dw  1
	powerupspeed      dw  3
	ishealth          db  0
	isspeed           db  0
	isdamage          db  0
	isfreeze          db  0
	isdecscore        db  0
	p1damage          dw  20
	p2damage          dw  20
	coinsx1           dw  ?
	coinsy1           dw  ?
	coinsize          dw  8
	coinspeed         dw  2
	variable1         dw  0ADh
	player1velocity   dw  7
	player2velocity   dw  7
	fireball1velocity dw  15
	fireball2velocity dw  15
	input             db  ?
	input2            db  ?
	nomove            equ 0AAh
	updirection       equ 0ABh
	downdirection     equ 0ACh
	rightdirection    equ 0ADh
	leftdirection     equ 0AEh
	fireball          equ 0AFH
	isfiring          db  0
	isfiring2         db  0
	p1hit             db  0
	p2hit             db  0
	arrowup           equ 4800h
	arrowdown         equ 5000h
	arrowright        equ 4D00h
	arrowleft         equ 4B00h
	Wkey              equ 1177h
	Akey              equ 1E61h
	Skey              equ 1f73h
	Dkey              equ 2064h
	spacekey          equ 3920h
	enterkey          equ 1C0Dh

	spaceto           dw  23
	;variables used in the game timer
	seconds           db  99
	timer             dw  100
	p1speedtimer      dw  '0'
	p2speedtimer      dw  '0'
	p1damagetimer     dw  '0'
	p2damagetimer     dw  '0'
	p1freezetimer     dw  '0'
	p2freezetimer     dw  '0'
	p1isfreezed       db  0
	p2isfreezed       db  0
	player1winsmsg    db  'Player 1 is the WINNER ! (PRESS any key TO CONTINUE)$'
	player2winsmsg    db  'Player 2 is the WINNER ! (PRESS any key TO CONTINUE)$'
	player1gamewin    db  'Player 1 Won the game (Press Space to exit or enter to return to main menu)$'
	player2gamewin    db  'Player 2 Won the game (Press Space to exit or enter to return to main menu)$'
	player1roundswon  db  '0'
	player2roundswon  db  '0'
	;variables used in the main menu
	menu              db  "Welcome To Coins War$"
	playmsg           db  "Play$"
	chatmsg           db  "Chat$"
	Exitmsg           db  "Exit$"
	chatmes           db  "Welcome to the chat !","$"
	playmes           db  "Play now","$"
	;variables used to display timer
	timermsg          db  'Seconds Left : ','$'
	;variables for getting user input
	NumMsgSent        db  1
	NumMsgRecived     db  1
	MsgSendIndix      db  0
	MsgReceivedIndix  dw  0
	Msg               db  40 dup(" "),'$'
	PressedKey        db  ?
	
	name1             db  15
	                  db  ?                                                                                                                                                                                	;CHARACTERS ENTERED BY USER.
	                  db  16 dup("$")

	name2             db  15
	                  db  ?                                                                                                                                                                                	;CHARACTERS ENTERED BY USER.
	                  db  16 dup("$")
	; name2             db 'Player2'

	getplayer1namemsg db  'Enter Your Name  $'
	getplayer2namemsg db  'Enter Receiver Name  $'

.code

Print Macro x,y,z,size,color
	                          mov   si,@data                   	;moves to si the location in memory of the data segment
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0
	                          mov   bl,color                   	;color of the text (white foreground and black background)
	                          mov   cx,size                    	;length of string
	                          mov   dh,y                       	;y coordinate
	                          mov   dl,x                       	;x coordinate
	                          mov   es,si                      	;moves to es the location in memory of the data segment
	                          mov   bp,offset z                	;mov bp the offset of the string
	                          int   10h

	                          endM


Main proc Far


	                          mov   ax,@data
	                          mov   ds,ax
	                          mov   ah, 0
	                          mov   al, 13h
	                          int   10H
							  call  getnamesandprint
	mainmenu:                 
	                          call  flushkeybuffer
                 
	                          call  DrawZ
	                          call  Drawballs
	                          call  Drawicon
	;page number=always zero
	                          Print 10,2,menu,20,0fh
	                          Print 17,15,playmsg,4,0fh
	                          Print 17, 17, chatmsg,4,0fh
	                          Print 17,19,Exitmsg,4,0fh
	                          Print 0,22,instmsg1,30,0fh
	                          Print 0,24,instmsg2,31,0fh
	waitforkey:               mov   ah, 01
	                          int   16h
	                          JZ    waitforkey
	                          mov   ah,0
	                          int   16h
							  
	mainmenuarrowup:          cmp   ax,arrowup
	                          jne   mainmenuarrowdown
	                          call  clearicon
	                          mov   ax,icony
	                          cmp   ax,116
	                          je    mainmenu
	;call  clearicon
	                          sub   ax,16
	                          mov   icony,ax
	                          call  flushkeybuffer
	                          jmp   mainmenu
	mainmenuarrowdown:        
	                          cmp   ax,arrowdown
	                          jne   mainmenuenter
	                          call  clearicon
	                          mov   ax,icony
	                          cmp   ax,148
	                          je    mainmenu
	;call  clearicon
	                          add   ax,16
	                          mov   icony,ax
	                          call  flushkeybuffer
	                          jmp   mainmenu

	mainmenuenter:            
	                          cmp   ax,enterkey
	                          jne   mainmenu
	                          mov   ax,icony
	                          cmp   ax,116
	                          je    PLAY
	                          cmp   ax,132
	                          je    Chat
	                          cmp   ax,148
	                          je    endgame
	                          jmp   mainmenu
							                         
	;compare to available options
	                          cmp   ah,4
	                          jz    endgame
	                          cmp   ah,3
	                          jz    CHAT
	                          cmp   ah,2
	                          jz    PLAY
	                          jmp   endgame
	CHAT:                     
	                          mov   dx,3fbh                    	; Line Control Register
	                          mov   al,10000000b               	;Set Divisor Latch Access Bit
	                          out   dx,al                      	;Out it
	;Set LSB byte of the Baud Rate Divisor Latch register.
	                          mov   dx,3f8h
	                          mov   al,0ch
	                          out   dx,al
	;Set MSB byte of the Baud Rate Divisor Latch register.
	                          mov   dx,3f9h
	                          mov   al,00h
	                          out   dx,al
	;Set port configuration
	                          mov   dx,3fbh
	                          mov   al,00011011b
	;0:Access to Receiver buffer, Transmitter buffer
	;0:Set Break disabled
	;011:Even Parity
	;0:One Stop Bit
	;11:8bits
	                          out   dx,al
	                          call  DrawLine
	Start:                    
	                          call  MsgRec
	                          cmp   al,1bh
	                          jne   resume
	                          jmp   end2
	resume:                   
	                          call  MsgSend
	                          cmp   NumMsgSent,11
	                          je    end3
	                          cmp   al,1bh
	                          jne   Start

	end2:                     
	                          mov   ah,0
	                          mov   al,13H
	                          int   10h
	end3:                     
	                          jmp   mainmenu
                                
	PLAY:                     
	                          call  transition

	maingameloop:             
	                          call  CheckforRoundend
	                          call  terminateandgetwinner
	;///////////////////////////////
	                          call  Initializepowerups
	                          call  Drawobjects
	                          call  getinput
	                          call  delay
	                          call  clearobjects
	                          call  updateobjects
	                          call  updatecoins
	                          call  updatepowerups
	;///////////////////////////////////////////
	timeloop:                 
	;GET SYSTEM TIME.
	                          mov   ah, 2ch
	                          int   21h                        	;RETURN SECONDS IN DH.
	;CHECK IF ONE SECOND HAS PASSED.
	                          cmp   dh, seconds
	                          je    LOOPTOGAME
	;if there is no change in the time then loop again
	;if there is change then decrease the timer by 1
	                          mov   seconds, dh
	                          sub   timer,1d
	                          




	                          mov   ax,p1speedtimer
	                          cmp   ax,'0'
	                          jne   decp1speedtimer
	                          jmp   player2speedtime

	decp1speedtimer:          dec   ax
	                          mov   p1speedtimer, ax
	                          mov   ax,p1speedtimer
	                          cmp   ax,'0'
	                          je    returnbacktoitsspeed
	                          jmp   player2speedtime
	returnbacktoitsspeed:     
	                          mov   bx,7
	                          mov   player1velocity,bx
	player2speedtime:         
	                          mov   ax,p2speedtimer
	                          cmp   ax,'0'
	                          jne   decp2speedtimer
	                          jmp   player1damagetime

	decp2speedtimer:          dec   ax
	                          mov   p2speedtimer, ax
	                          cmp   ax,'0'
	                          je    returnbacktoitsspeed2
	                          jmp   player1damagetime
	returnbacktoitsspeed2:    
	                          mov   bx,7
	                          mov   player2velocity,bx

	player1damagetime:        
	                          mov   ax,p1damagetimer
	                          cmp   ax,'0'
	                          jne   decp1damagetimer
	                          jmp   player2damagetime
	decp1damagetimer:         
	                          dec   ax
	                          mov   p1damagetimer, ax
	; if the timer is 0 then exit
	       

	                          mov   ax,p1damagetimer
	                          cmp   ax,'0'
	                          je    returnbacktoitsdamage
	                          jmp   player2damagetime
	returnbacktoitsdamage:    
	                          mov   bx,5
	                          mov   p1damage,bx



	player2damagetime:        
	                          mov   ax,p2damagetimer
	                          cmp   ax,'0'
	                          jne   decp2damagetimer
	                          jmp   player1freezetime
	decp2damagetimer:         
	                          dec   ax
	                          mov   p2damagetimer, ax
	; if the timer is 0 then exit
	       

	                          mov   ax,p2damagetimer
	                          cmp   ax,'0'
	                          je    returnbacktoitsdamage2
	                          jmp   player1freezetime
	returnbacktoitsdamage2:   
	                          push  bx
	                          mov   bx,5
	                          mov   p2damage,bx
	                          pop   bx
	player1freezetime:        
	                          mov   ax,p1freezetimer
	                          cmp   ax,'0'
	                          jne   decp1freezetimer
	                          jmp   player2freezetime
	decp1freezetimer:         
	                          dec   ax
	                          mov   p1freezetimer, ax
	; if the timer is 0 then exit
	       

	                          mov   ax,p1freezetimer
	                          cmp   ax,'0'
	                          je    unfreezep1
	                          jmp   player2freezetime
	unfreezep1:               
	                          mov   bx,7
	                          mov   player1velocity,bx
	                          mov   bl,0
	                          mov   p1isfreezed,bl

	player2freezetime:        
	                          mov   ax,p2freezetimer
	                          cmp   ax,'0'
	                          jne   decp2freezetimer
	                          jmp   continueLoop
	decp2freezetimer:         
	                          dec   ax
	                          mov   p2freezetimer, ax
	; if the timer is 0 then exit

	                          mov   ax,p2freezetimer
	                          cmp   ax,'0'
	                          je    unfreezep2
	                          jmp   continueLoop
	unfreezep2:               
	                          mov   bx,7
	                          mov   player2velocity,bx
	                          mov   bl, 0
	                          mov   p2isfreezed,bl

	continueLoop:             

	                          mov   ax,timer
	                            
	;/////////////////////////////////////
	
	LOOPTOGAME:               jmp   maingameloop

					          


	endgame:                  
	                          mov   ah,0
	                          mov   al,3
	                          int   10h
	
	                          mov   ax, 4c00h
	                          int   21h
Main ENDP


PORTS_INTLIZATION PROC
	                          Mov   dx,3fbh
	                          mov   al,10000000b
	                          Out   dx,al
	                          mov   dx,3f8h
	                          mov   al,0ch
	                          out   dx,al
	                          mov   dx,3f9h
	                          mov   al,00h
	                          out   dx,al
	                          mov   dx,3fbh
	                          mov   al,00011011b
	                          out   dx,al
	                          RET
PORTS_INTLIZATION ENDP

	;draws first player health
FirstHealthBar PROC
	                          mov   cx,10                      	;Column
	                          mov   dx,150                     	;Row
	                          mov   al,0fh                     	;Pixel color
	                          mov   ah,0ch                     	;Draw Pixel Command
	first1:                   int   10h
	                          inc   cx
	                          cmp   cx,100
	                          jnz   first1
	                          mov   cx,10                      	;Column
	                          mov   dx,154                     	;Row
	first2:                   int   10h
	                          inc   cx
	                          cmp   cx,100
	                          jnz   first2
	                          mov   cx,10                      	;Column
	                          mov   dx,150                     	;Row
	first3:                   int   10h
	                          inc   dx
	                          cmp   dx,154
	                          jnz   first3
	                          mov   cx,100                     	;Column
	                          mov   dx,150
	first4:                   int   10h
	                          inc   dx
	                          cmp   dx,155
	                          jnz   first4
	                          mov   cx,11                      	;Column
	                          mov   dx,151                     	;Row
	                          mov   al,04h                     	;Pixel color
	first5:                   
	                          int   10h
	                          inc   dx
	                          int   10h
	                          inc   dx
	                          int   10h
	                          mov   dx,151
	                          inc   cx
	                          cmp   cx,PLayer1Health
	                          jnz   first5
	                          ret
FirstHealthBar ENDP

	;draws seconed player health
SeconedHealthBar PROC
	                          mov   cx,220                     	;Column
	                          mov   dx,150                     	;Row
	                          mov   al,0fh                     	;Pixel color
	                          mov   ah,0ch                     	;Draw Pixel Command
	seconed1:                 int   10h
	                          inc   cx
	                          cmp   cx,310
	                          jnz   seconed1
	                          mov   cx,220                     	;Column
	                          mov   dx,154                     	;Row
	seconed2:                 int   10h
	                          inc   cx
	                          cmp   cx,310
	                          jnz   seconed2
	                          mov   cx,220                     	;Column
	                          mov   dx,150                     	;Row
	seconed3:                 int   10h
	                          inc   dx
	                          cmp   dx,154
	                          jnz   seconed3
	                          mov   cx,310                     	;Column
	                          mov   dx,150
	seconed4:                 int   10h
	                          inc   dx
	                          cmp   dx,155
	                          jnz   seconed4
	                          mov   cx,221                     	;Column
	                          mov   dx,151                     	;Row
	                          mov   al,01h                     	;Pixel color
	seconed5:                 int   10h
	                          inc   dx
	                          int   10h
	                          inc   dx
	                          int   10h
	                          mov   dx,151
	                          inc   cx
	                          cmp   cx,PLayer2Health
	                          jnz   seconed5
	                          ret
SeconedHealthBar ENDP

	;if first player is hit
Damage1 PROC
	                          mov   ah,0ch                     	;Draw Pixel Command
	                          mov   bx,p1damage
	                          add   bx,10
	                          cmp   bx,PLayer1Health
	                          jge   dead1
	                          mov   bx,p1damage
	                          sub   PLayer1Health,bx
	                          mov   cx,PLayer1Health           	;Column
	                          cmp   cx,10
	                          jz    dead1
	blackrow1:                mov   dx,151                     	;Row
	                          mov   al,00h                     	;Pixel color
	                          int   10h
	                          inc   dx
	                          int   10h
	                          inc   dx
	                          int   10h
	                          dec   cx
	                          cmp   cx,PLayer1Health
	                          jnz   blackrow1
	                          ret
	dead1:                    
	                          mov   bx,100
	                          mov   PLayer1Health,bx
	                          dec   lives1
	                          ret
Damage1 ENDP

	;if seconed player is hit
Damage2 PROC
	                          mov   ah,0ch                     	;Draw Pixel Command
	                          mov   bx,p2damage
	                          add   bx,220
	                          cmp   bx,PLayer2Health
	                          jge   dead2
	                          mov   bx,p2damage
	                          sub   PLayer2Health,bx
	                          mov   cx,PLayer2Health           	;Column
	                          cmp   cx,220
	                          jz    dead2
	blackrow2:                mov   dx,151                     	;Row
	                          mov   al,00h                     	;Pixel color
	                          int   10h
	                          inc   dx
	                          int   10h
	                          inc   dx
	                          int   10h
	                          dec   cx
	                          cmp   cx,PLayer2Health
	                          jnz   blackrow2
	                          ret
	dead2:                    
	                          mov   bx,310
	                          mov   PLayer2Health,bx
	                          dec   lives2
	                          ret
Damage2 ENDP

	;Appearing text
Text PROC
	                          mov   si,@data                   	;moves to si the location in memory of the data segment
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          Print 65,199,name1+2,7,0fh
	                          Print 92,199,name2+2,7,0fh
	                          Print 92,201,msglives,1,0ch
	                          Print 65,201,msglives,1,0ch
	                          Print 94,201,lives2,1,0fh
	                          Print 67,201,lives1,1,0fh
	                          Print 16,2,round,6,0fh
	                          Print 22,2 roundnum,1,0fh
	                          Print 10,3,timermsg,15,0fh
	                          
                        


	;;;;;;;;DINA;;;;;;;;;;;
	                          Print 65,203,msg3,6,0fh
	                          Print 92,203,msg3,6,0fh


	                          mov   cx,score1
	                          mov   di,10
	                          cmp   cx,di
	                          jl    putspace1
	                          jmp   itsokaytoprintit1
	putspace1:                
	                          mov   dh,203
	                          mov   dl,72
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   itsokaytoprintit1

	itsokaytoprintit1:        
	                          mov   dh,203                     	;y coordinate
	                          mov   dl,71                      	;x coordinate
	                          mov   ah,02h
	                          int   10h
	                          mov   ax,score1
	                          call  printnumbers



	                          mov   cx,score2
	                          mov   di,10
	                          cmp   cx,di
	                          jl    putspace2
	                          jmp   itsokaytoprintit2
	putspace2:                
	                          mov   dh,203
	                          mov   dl,99
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   itsokaytoprintit2

	itsokaytoprintit2:        

	                          mov   dh,203                     	;y coordinate
	                          mov   dl,98                      	;x coordinate
	                          mov   ah,02h
	                          int   10h
	                          mov   ax,score2
	                          call  printnumbers

	;;;;;;;;;;printing game timer;;;;;;;
	                          mov   cx,timer
	                          mov   di,10
	                          cmp   cx,di
	                          jl    putspace3
	                          jmp   itsokaytoprintit3
	putspace3:                
	                          mov   dh,3
	                          mov   dl,25
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h

	                          mov   dh,3
	                          mov   dl,26
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h

	                          mov   dh,3
	                          mov   dl,27
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          mov   dh,3
	                          mov   dl,28
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          mov   dh,3
	                          mov   dl,29
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   itsokaytoprintit3
	itsokaytoprintit3:        
	                          mov   dh,3                       	;y coordinate
	                          mov   dl,25                      	;x coordinate
	                          mov   ah,02h
	                          int   10h
	                          mov   ax,timer
	                          call  printnumbers
	;;;;;;;Amr;;;;;;
	;;;;;print speed timer;;;;;;
	                          mov   ax,p1speedtimer
	                          cmp   ax,'0'
	                          je    deletep1speedtimer
	                          jmp   printplayer1speedtimer
	deletep1speedtimer:       
	                          mov   dh, 2
	                          mov   dl, 5
	                          mov   ah,02
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h

	                          jmp   checkprintp2speedtimer
	printplayer1speedtimer:   
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 2
	                          mov   dl, 5
	                          mov   bl, 0eh
	                          lea   bp, p1speedtimer
	                          int   10h

	checkprintp2speedtimer:   
	                          mov   ax, p2speedtimer
	                          cmp   ax,'0'
	                          je    deletep2speedtimer
	                          jmp   printplayer2speedtimer
	deletep2speedtimer:       
	                          mov   dh, 1
	                          mov   dl, 35
	                          mov   ah,02
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h

	                          jmp   checkprintp1damagetimer
	printplayer2speedtimer:   
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 1
	                          mov   dl, 35
	                          mov   bl, 0eh
	                          lea   bp, p2speedtimer
	                          int   10h



	;;;;;;;;DINA;;;;;;;;;
	;;;;;;;print damage timer;;;;;;;;;;;
	checkprintp1damagetimer:  
	                          mov   ax,p1damagetimer
	                          cmp   ax,'0'
	                          je    deletep1damagetimer
	                          jmp   printplayer1damagetimer
	deletep1damagetimer:      
	                          mov   dh,2
	                          mov   dl,35
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   checkprintp2damagetimer

	printplayer1damagetimer:  
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 2
	                          mov   dl,35
	                          mov   bl, 0ch
	                          lea   bp, p1damagetimer
	                          int   10h

	checkprintp2damagetimer:  
	                          mov   ax,p2damagetimer
	                          cmp   ax,'0'
	                          je    deletep2damagetimer
	                          jmp   printplayer2damagetimer
	deletep2damagetimer:      
	                          mov   dh,3
	                          mov   dl,5
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   checkprintp1freezetimer
	printplayer2damagetimer:  
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 3
	                          mov   dl, 5
	                          mov   bl, 0ch
	                          lea   bp, p2damagetimer
	                          int   10h
                           
	checkprintp1freezetimer:  
	                          mov   ax,p1freezetimer
	                          cmp   ax,'0'
	                          je    deletep1freezetimer
	                          jmp   printplayer1freezetimer
	deletep1freezetimer:      
	                          mov   dh,3
	                          mov   dl,3
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   checkprintp2freezetimer
	printplayer1freezetimer:  
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 3
	                          mov   dl,3
	                          mov   bl, 0bh
	                          lea   bp, p1freezetimer
	                          int   10h

	checkprintp2freezetimer:  
	                          mov   ax,p2freezetimer
	                          cmp   ax,'0'
	                          
	                          je    deletep2freezetimer
	                          jmp   printplayer2freezetimer
	deletep2freezetimer:      
	                          mov   dh,2
	                          mov   dl,37
	                          mov   ah,02h
	                          int   10h
	                          mov   dl,' '
	                          mov   ah,2
	                          int   21h
	                          jmp   endtext
	printplayer2freezetimer:  
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0                       	;page number=always zero
	                          mov   cx,1
	                          mov   dh, 2
	                          mov   dl,37
	                          mov   bl, 0bh
	                          lea   bp, p2freezetimer
	                          int   10h



	endtext:                  
	                          ret
Text ENDP

printnumbers proc
	                          push  ax
							
	                          mov   cx, 0
	                          mov   bx, 10
@@loophere:
	                          mov   dx, 0
	                          div   bx
	                          push  ax
	                          add   dl, '0'
	                          pop   ax
	                          push  dx
	                          inc   cx
	                          cmp   ax, 0
	                          jnz   @@loophere
	                          mov   ah, 2
							
@@loophere2:
	                          pop   dx
	                          int   21h
	                          loop  @@loophere2
						
	                          pop   ax
	                          ret
printnumbers endp

transition proc
	                          mov   ah,0ch
	                          mov   al,00h
	                          mov   bl,00h

	                          mov   cx,150
	                          mov   dx,150

	transrow:                 

	transcol:                 
	                          int   10h
	                          dec   dx
	                          jnz   transcol

	                          dec   cx
	                          jnz   transrow

	                          RET
transition endp

drawBack proc near
	                          mov   ah,0ch
	                          mov   al,0fh
	                          mov   bh,00h
	                          mov   cx,32
	startb:
	                          mov   dx,24
	start2:                   
	                          int   10h
	                          add   dx,24
	                          cmp   dx,240
	                          jnz   start2
	                          add   cx,32
	                          cmp   cx, 320
	                          jnz   startb

	                          mov   ah,0bh
	                          mov   cx,earthx
	                          mov   dx, earthy

	                          add   cx, ew
	                          add   dx, eH
	                          lea   di, e
	                          jmp   l

	d:                        
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    l
	                          int   10h


	l:                        
	                          inc   di
	                          dec   cx
	                          cmp   cx,earthx
	                          jnz   d

	                          add   cx, ew
	                          dec   dx
	                          cmp   dx,earthy
	                          jz    t
	                          jnz   d
	t:                        
	                          RET
drawBack ENDP

Drawballs proc	near

	                          mov   cx,132
	                          mov   dx, 75

	                          add   cx, ballsW
	                          add   dx, ballsH
	                          lea   di, balls
	                          jmp   loopballs

	drawballss:               
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loopballs
	                          int   10h


	loopballs:                
	                          inc   di
	                          dec   cx
	                          cmp   cx,132
	                          jnz   drawballss

	                          add   cx, ballsw
	                          dec   dx
	                          cmp   dx,75
	                          jz    terminateballs
	                          jnz   drawballss

	terminateballs:           
	                          RET
Drawballs endp

DrawZ proc	near

	                          mov   cx,120
	                          mov   dx, 30

	                          add   cx, zw
	                          add   dx, zH
	                          lea   di, zshape
	                          jmp   loopzz

	drawzz:                   
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loopzz
	                          int   10h


	loopzz:                   
	                          inc   di
	                          dec   cx
	                          cmp   cx,120
	                          jnz   drawzz

	                          add   cx, zw
	                          dec   dx
	                          cmp   dx,30
	                          jz    terminatezz
	                          jnz   drawzz

	terminatezz:              
	                          RET
DrawZ endp



Drawicon proc	near

	                          mov   cx,iconx
	                          mov   dx, icony

	                          add   cx, iconw
	                          add   dx, iconH
	                          lea   di, icon
	                          jmp   loopicon

	drawicon1:                
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loopicon
	                          int   10h


	loopicon:                 
	                          inc   di
	                          dec   cx
	                          cmp   cx,iconx
	                          jnz   drawicon1

	                          add   cx, iconw
	                          dec   dx
	                          cmp   dx,icony
	                          jz    terminateicon
	                          jnz   drawicon1

	terminateicon:            
	                          RET
Drawicon endp




DrawPlayer1 proc near

	                          mov   ah,0bh
	                          mov   cx,player1x
	                          mov   dx, player1y

	                          add   cx, p1w
	                          add   dx, p1H
							
	                          mov   bl,p1isfreezed
	                          cmp   bl,1
	                          jne   beginplayer1
	                          lea   di,p1freeze
	                          jmp   loop1
							
	beginplayer1:             
	                          lea   di, p1
	                          jmp   loop1

	draw1:                    
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loop1
	                          mov   bl,p1hit
	                          cmp   bl,1
	                          je    drawred1
	                          jmp   keep1

	drawred1:                 
	                          mov   al,0ch

	keep1:                    
	                          int   10h


	loop1:                    
	                          inc   di
	                          dec   cx
	                          cmp   cx,player1x
	                          jnz   draw1

	                          add   cx, p1w
	                          dec   dx
	                          cmp   dx,player1y
	                          jz    terminate1
	                          jnz   draw1

	terminate1:               
	                          mov   bl,0
	                          mov   p1hit,bl
	                          RET
DrawPlayer1 ENDP

DrawPlayer2 proc near
	                          mov   ah,0bh
	                          mov   cx,player2x
	                          mov   dx, player2y

	                          add   cx, p2w
	                          add   dx, p2H

	                          mov   bl,p2isfreezed
	                          cmp   bl,1
	                          jne   beginplayer2
	                          lea   di,p2freeze
	                          jmp   loop2

	beginplayer2:             
	                          lea   di, p2
	                          jmp   loop2

	draw2:                    
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h
	                          cmp   al,0
	                          jz    loop2

	                          mov   bl,p2hit
	                          cmp   bl,1
	                          je    drawred2
	                          jmp   keep

	drawred2:                 
	                          mov   al,0ch

	keep:                     
	                          int   10h


	loop2:                    
	                          inc   di
	                          dec   cx
	                          cmp   cx,player2x
	                          jnz   draw2

	                          add   cx, p2w
	                          dec   dx
	                          cmp   dx,player2y
	                          jz    terminate2
	                          jnz   draw2

	terminate2:               
	                          mov   bl,0
	                          mov   p2hit,bl
	                          RET
DrawPlayer2 ENDP

Drawfireball proc near
	                          mov   al,isfiring
	                          cmp   al,1
	                          jne   terminate3

	                          mov   ah,0bh
	                          mov   cx,fireball1x
	                          mov   dx, fireball1y

	                          add   cx, fireball1W
	                          add   dx, fireball1H
	                          lea   di, fireball1
	                          jmp   loop3

	draw3:                    
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loop3
	                          int   10h


	loop3:                    
	                          inc   di
	                          dec   cx
	                          cmp   cx,fireball1x
	                          jnz   draw3

	                          add   cx, fireball1W
	                          dec   dx
	                          cmp   dx,fireball1y
	                          jz    terminate3
	                          jnz   draw3

	terminate3:               
	                          RET
Drawfireball ENDP

Drawfireball2 proc near
	                          mov   al,isfiring2
	                          cmp   al,1
	                          jne   terminate4

	                          mov   ah,0bh
	                          mov   cx,fireball2x
	                          mov   dx, fireball2y

	                          add   cx, fireball2W
	                          add   dx, fireball2H
	                          lea   di, fireball2
	                          jmp   loop4

	draw4:                    
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loop4
	                          int   10h


	loop4:                    
	                          inc   di
	                          dec   cx
	                          cmp   cx,fireball2x
	                          jnz   draw4

	                          add   cx, fireball2W
	                          dec   dx
	                          cmp   dx,fireball2y
	                          jz    terminate4
	                          jnz   draw4

	terminate4:               
	                          RET
Drawfireball2 ENDP

Drawcoins PROC near

	                          push  di
	                          push  cx
	                          push  dx
	                          push  ax
	                          push  bx
	                          push  si


	                          mov   ah,0bh
	                          mov   cx,coinsx1
	                          mov   dx,coinsy1
	                          add   cx,coinW
	                          add   dx,coinH
	                          lea   di,coin
	                          jmp   loop5

	draw5:                    
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    loop5
	                          int   10h


	loop5:                    
	                          inc   di
	                          dec   cx
	                          cmp   cx,coinsx1
	                          jnz   draw5

	                          add   cx, coinW
	                          dec   dx
	                          cmp   dx,coinsy1
	                          jz    terminate5
	                          jnz   draw5

	terminate5:               

	                          pop   si
	                          pop   bx
	                          pop   ax
	                          pop   dx
	                          pop   cx
	                          pop   di

	                          RET
Drawcoins ENDP

	;;;;;;;;;DRAW EACH COIN;;;;;;;;;;;
Draweachcoin proc near
	                          push  ax
	                          push  bx
	                          push  cx
	                          push  dx
	                          push  di

	                          mov   bx,coinsize
	                          mov   si,bx
	                          mov   di,0
	draw7:                    
	                          mov   ax,coinx[di]
	                          mov   coinsx1,ax
	                          mov   bx,coiny[di]
	                          mov   coinsy1,bx
	                          call  Drawcoins
	                          add   di,2
	                          dec   si
	                          jnz   draw7


	                          pop   ax
	                          pop   bx
	                          pop   cx
	                          pop   dx
	                          pop   di
	                          RET
Draweachcoin ENDP


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;   Delay proc nearedure      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawHealthPowerUp PROC near

							
	                          mov   bl,ishealth
	                          cmp   bl,1
	                          jne   healthterminate

	                          mov   ah,0bh
	                          mov   cx,healthpowerx
	                          mov   dx,healthpowery
	                          add   cx,healthW
	                          add   dx,healthH

	                          lea   di,health
	                          jmp   healthloop

	healthdraw:               
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    healthloop
	                          int   10h


	healthloop:               
	                          inc   di
	                          dec   cx
	                          cmp   cx,healthpowerx
	                          jnz   healthdraw

	                          add   cx, healthW
	                          dec   dx
	                          cmp   dx,healthpowery
	                          jz    healthterminate
	                          jnz   healthdraw

	healthterminate:          
	                          RET
DrawHealthPowerup ENDP

DrawspeedPowerUp PROC near

							
	                          mov   bl,isspeed
	                          cmp   bl,1
	                          jne   speedterminate

	                          mov   ah,0bh
	                          mov   cx,speedpowerx
	                          mov   dx,speedpowery
	                          add   cx,speedW
	                          add   dx,speedH

	                          lea   di,speed
	                          jmp   speedloop

	speeddraw:                
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    speedloop
	                          int   10h


	speedloop:                
	                          inc   di
	                          dec   cx
	                          cmp   cx,speedpowerx
	                          jnz   speeddraw

	                          add   cx, speedW
	                          dec   dx
	                          cmp   dx,speedpowery
	                          jz    speedterminate
	                          jnz   speeddraw

	speedterminate:           
	                          RET
DrawSpeedPowerup ENDP


DrawfreezePowerUp PROC near

							
	                          mov   bl,isfreeze
	                          cmp   bl,1
	                          jne   freezeterminate

	                          mov   ah,0bh
	                          mov   cx,freezepowerx
	                          mov   dx,freezepowery
	                          add   cx,freezeW
	                          add   dx,freezeH

	                          lea   di,freeze
	                          jmp   freezeloop

	freezedraw:               
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    freezeloop
	                          int   10h


	freezeloop:               
	                          inc   di
	                          dec   cx
	                          cmp   cx,freezepowerx
	                          jnz   freezedraw

	                          add   cx, freezeW
	                          dec   dx
	                          cmp   dx,freezepowery
	                          jz    freezeterminate
	                          jnz   freezedraw

	freezeterminate:          
	                          RET
DrawfreezePowerup ENDP




DrawdamagePowerUp PROC near

							
	                          mov   bl,isdamage
	                          cmp   bl,1
	                          jne   damageterminate

	                          mov   ah,0bh
	                          mov   cx,damagepowerx
	                          mov   dx,damagepowery
	                          add   cx,damageW
	                          add   dx,damageH

	                          lea   di,damage
	                          jmp   damageloop

	damagedraw:               
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    damageloop
	                          int   10h


	damageloop:               
	                          inc   di
	                          dec   cx
	                          cmp   cx,damagepowerx
	                          jnz   damagedraw

	                          add   cx, damageW
	                          dec   dx
	                          cmp   dx,damagepowery
	                          jz    damageterminate
	                          jnz   damagedraw

	damageterminate:          
	                          RET
DrawdamagePowerUp ENDP

DrawdecscorePowerUp PROC near

							
	                          mov   bl,isdecscore
	                          cmp   bl,1
	                          jne   decscoreterminate

	                          mov   ah,0bh
	                          mov   cx,decscorepowerx
	                          mov   dx,decscorepowery
	                          add   cx,decscoreW
	                          add   dx,decscoreH

	                          lea   di,decscore
	                          jmp   decscoreloop

	decscoredraw:             
	                          mov   ah,0ch
	                          mov   al, [di]
	                          mov   bh, 00h

	                          cmp   al,0
	                          jz    decscoreloop
	                          int   10h


	decscoreloop:             
	                          inc   di
	                          dec   cx
	                          cmp   cx,decscorepowerx
	                          jnz   decscoredraw

	                          add   cx, decscoreW
	                          dec   dx
	                          cmp   dx,decscorepowery
	                          jz    decscoreterminate
	                          jnz   decscoredraw

	decscoreterminate:        
	                          RET
DrawdecscorePowerup ENDP


Drawobjects proc near
	                          call  drawBack
	                          call  DrawPlayer1
	                          call  DrawPlayer2
	                          call  Draweachcoin
	                          call  FirstHealthBar
	                          call  SeconedHealthBar
	                          call  Text
	                          call  Drawfireball
	                          call  Drawfireball2
	                          call  DrawHealthPowerUp
	                          call  DrawSpeedPowerup
	                          call  DrawdamagePowerUp
	                          call  DrawfreezePowerUp
	                          call  DrawdecscorePowerUp



	                          RET
Drawobjects ENDP

delay proc near
	                          mov   cx,0
	                          mov   dx,25000
	                          mov   ah,86h
	                          int   15h
	                          RET
delay endp

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;; flush keyboard-buffer proc near ;;;;;;
flushkeybuffer proc near
	                          mov   ah,0ch
	                          int   21h
	                          RET
flushkeybuffer endp
	;;;;;;;;;;;;;; checkinput for player 1  proc ;;;;;;;
getinput proc near
	                          push  ax
	                          push  bx
	                          mov   ah,01h
	                          int   16h

	                          cmp   ax, Wkey
	                          jz    up

	                          cmp   ax, Skey
	                          jz    down

	                          cmp   ax, Dkey
	                          jz    right

	                          cmp   ax, Akey
	                          jz    left
	                          jmp   freeze1



	up:                       
	                          call  flushkeybuffer
	                          mov   bl, updirection
	                          mov   input, bl
	                          jmp   nextinput1

	down:                     
	                          call  flushkeybuffer
	                          mov   bl, downdirection
	                          mov   input, bl
	                          jmp   nextinput1

	right:                    
	                          call  flushkeybuffer
	                          mov   bl, rightdirection
	                          mov   input, bl
	                          jmp   nextinput1

	left:                     
	                          call  flushkeybuffer
	                          mov   bl, leftdirection
	                          mov   input, bl
	                          jmp   nextinput1

	freeze1:                  
	                          mov   bl, nomove
	                          mov   input, bl
	                          jmp   nextinput1

	nextinput1:               
	                          cmp   ax, arrowup
	                          jz    up2

	                          cmp   ax, arrowdown
	                          jz    down2

	                          cmp   ax, arrowright
	                          jz    right2

	                          cmp   ax, arrowleft
	                          jz    left2
	                          jmp   freeze2

	up2:                      
	                          call  flushkeybuffer
	                          mov   bl, updirection
	                          mov   input2, bl
	                          jmp   nextinput2

	down2:                    
	                          call  flushkeybuffer
	                          mov   bl, downdirection
	                          mov   input2, bl
	                          jmp   nextinput2

	right2:                   
	                          call  flushkeybuffer
	                          mov   bl, rightdirection
	                          mov   input2, bl
	                          jmp   nextinput2

	left2:                    
	                          call  flushkeybuffer
	                          mov   bl, leftdirection
	                          mov   input2, bl
	                          jmp   nextinput2

	freeze2:                  
	                          mov   bl, nomove
	                          mov   input2, bl
	                          jmp   nextinput2

	nextinput2:               
	                          cmp   ax,spacekey
	                          jz    fire
	                          jmp   nextinput3

	fire:                     
	                          call  flushkeybuffer
	                          mov   bl, isfiring
	                          cmp   bl,1
	                          jnz   checkifp1freeze
	                          jmp   nextinput3
	checkifp1freeze:          
	                          mov   bl,p1isfreezed
	                          cmp   bl,1
	                          jne   startfiring
	                          jmp   nextinput3

	startfiring:              
	                          call  flushkeybuffer
	                          mov   bl,1
	                          mov   byte ptr [isfiring], bl
	                          mov   bx,player1x
	                          add   bx,10
	                          mov   fireball1x, bx
	                          mov   bx, player1y
	                          add   bx,10
	                          mov   fireball1y, bx
	                          jmp   nextinput3

	nextinput3:               
	                          cmp   ax,enterkey
	                          jz    fire2
	                          jmp   endinput

	fire2:                    
	                          call  flushkeybuffer
	                          mov   bl, isfiring2
	                          cmp   bl,1
	                          jnz   checkifp2freeze
	                          jmp   endinput
	checkifp2freeze:          
	                          mov   bl,p2isfreezed
	                          cmp   bl,1
	                          jne   startfiring2
	                          jmp   endinput

	startfiring2:             
	                          call  flushkeybuffer
	                          mov   bl,1
	                          mov   byte ptr [isfiring2], bl
	                          mov   bx,player2x
	                          sub   bx,10
	                          mov   fireball2x, bx
	                          mov   bx, player2y
	                          add   bx,10
	                          mov   fireball2y, bx
	                          jmp   endinput



	endinput:                 
	                          call  flushkeybuffer
	                          pop   bx
	                          pop   ax
	                          RET
getinput ENDP
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;; update player 1 proc near ;;;;;;;;;;;;;;;;
updateobjects proc near
	                          push  bx

	;; player 1 movement ;;
	                          mov   bl,input
	                          cmp   bl,updirection
	                          jz    checkup1



	                          cmp   bl,downdirection
	                          jz    checkdown1


	                          cmp   bl,rightdirection
	                          jz    checkright1

	                          cmp   bl,leftdirection
	                          jz    checkleft1

	                          cmp   bl, nomove
	                          jz    nextupdate1

	checkup1:                 
	                          mov   bx,player1y
	                          sub   bx,player1velocity
	                          cmp   bx,200
	                          jg    moveup1
	                          jmp   nextupdate1
	moveup1:                  
	                          mov   player1y, bx
	                          jmp   nextupdate1

	checkdown1:               
	                          mov   bx,player1y
	                          add   bx,player1velocity
	                          cmp   bx,340
	                          jl    movedown1
	                          jmp   nextupdate1
	movedown1:                
	                        
	                          mov   player1y, bx
	                          jmp   nextupdate1

	checkleft1:               
	                          mov   bx,player1x
	                          sub   bx,player1velocity
	                          cmp   bx,-60
	                          jg    moveleft1
	                          jmp   nextupdate1
	moveleft1:                
	                        
	                          mov   player1x, bx
	                          jmp   nextupdate1

	checkright1:              
	                          mov   bx,player1x
	                          add   bx,player1velocity
	                          cmp   bx,180
	                          jle   moveright1
	                          jmp   nextupdate1
	moveright1:               
	                        
	                          mov   player1x, bx
	                          jmp   nextupdate1

	                          mov   bl,input2
	                          cmp   bl,updirection
	                          jz    checkup2


	nextupdate1:              
	                          mov   bl,input2
	                          cmp   bl,downdirection
	                          jz    checkdown2

	                          cmp   bl,rightdirection
	                          jz    checkright2


	                          cmp   bl,leftdirection
	                          jz    checkleft2


	                          cmp   bl, nomove
	                          jz    fireball1update

	checkup2:                 
	                          mov   bx,player2y
	                          sub   bx,player2velocity
	                          cmp   bx,200
	                          jg    moveup2
	                          jmp   fireball1update
	moveup2:                  
	                        
	                          mov   player2y, bx
	                          jmp   fireball1update

	checkdown2:               
	                          mov   bx,player2y
	                          add   bx,player2velocity
	                          cmp   bx,340
	                          jl    movedown2
	                          jmp   fireball1update
	movedown2:                
	                        
	                          mov   player2y, bx
	                          jmp   fireball1update

	checkleft2:               
	                          mov   bx,player2x
	                          sub   bx,player2velocity
	                          cmp   bx,-25
	                          jg    moveleft2
	                          jmp   fireball1update
	moveleft2:                
	                        
	                          mov   player2x, bx
	                          jmp   fireball1update

	checkright2:              
	                          mov   bx,player2x
	                          add   bx,player2velocity
	                          cmp   bx,210
	                          jle   moveright2
	                          jmp   fireball1update
	moveright2:               
	                        
	                          mov   player2x, bx
	                          jmp   fireball1update



	fireball1update:          
	                          mov   al, isfiring
	                          cmp   al,1
	                          jne   stopfireball1

	                          mov   bx,fireball1x
	                          mov   ax,player2x
	                          sub   ax,10
	                          cmp   bx,ax
	                          jge   p2startdamage
	                          jmp   updatefireball1velocity

	p2startdamage:            
	                          mov   ax,player2x
	                          add   ax,10
	                          cmp   fireball1x,ax
	                          jle   checkdamage1
	                          jmp   updatefireball1velocity

	checkdamage1:             
	                          mov   ax,player2y
	                          sub   ax,10
	                          cmp   fireball1y,ax
	                          jge   checkdamage2
	                          jmp   updatefireball1velocity

	checkdamage2:             
	                          add   ax,45
	                          cmp   fireball1y,ax
	                          jg    updatefireball1velocity
	                          call  Damage2
	                          mov   bl,1
	                          mov   p2hit,bl
	                          jmp   stopfireball1

	updatefireball1velocity:  
	                          cmp   bx, 210
	                          jge   stopfireball1
	                          add   bx,fireball1velocity
	                          mov   fireball1x,bx
	                          jmp   fireball2update

	stopfireball1:            
	                          mov   bl,0
	                          mov   isfiring,bl
	                          jmp   fireball2update

	fireball2update:          
	                          mov   al, isfiring2
	                          cmp   al,1
	                          jne   stopfireball2
	                          mov   bx,fireball2x
	                          mov   ax,player1x
	                          add   ax,20
	                          cmp   bx,ax
	                          jle   p1startdamage
	                          jmp   updatefireball2velocity

	p1startdamage:            
	                          mov   ax,player1x
	                          sub   ax,10
	                          cmp   fireball2x,ax
	                          jge   checkdamage3
	                          jmp   updatefireball2velocity

	checkdamage3:             
	                          mov   ax,player1y
	                          sub   ax,15
	                          cmp   fireball2y,ax
	                          jge   checkdamage4
	                          jmp   updatefireball2velocity

	checkdamage4:             
	                          add   ax,45
	                          cmp   fireball2y,ax
	                          jg    updatefireball2velocity
	                          call  Damage1
	                          mov   bl,1
	                          mov   p1hit,bl
	                          jmp   stopfireball2

	updatefireball2velocity:  
	                          mov   bx, fireball2x
	                          cmp   bx, -40
	                          jle   stopfireball2
	                          sub   bx,fireball2velocity
	                          mov   fireball2x,bx
	                          jmp   endupdateobjects
	stopfireball2:            
	                          mov   bl,0
	                          mov   isfiring2,bl

	endupdateobjects:         
	                          pop   bx
	                          RET
updateobjects endp

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;; DINA  ;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;Get Random;;;;;;;;;;;;;;
getrandom proc
	                          push  dx
	                          mov   ax,25173
	                          mul   variable1
	                          add   ax, 13849
	                          mov   variable1,ax
	                          pop   dx
	                          ret
getrandom endp

getrandomfrom1to20 proc
	                          push  dx
	                          push  bx
	                          mov   dx,0
	                          mov   bx,20
	                          div   bx
	                          inc   dx
	                          mov   ax,dx
	                          pop   bx
	                          pop   dx
	                          ret
getrandomfrom1to20 endp

getrandomfrom1to60 proc
	                          push  dx
	                          push  bx
	                          mov   dx,0
	                          mov   bx,60
	                          div   bx
	                          inc   dx
	                          mov   ax,dx
	                          pop   bx
	                          pop   dx
	                          ret
getrandomfrom1to60 endp


getrandomfrom1to240 proc
	                          push  dx
	                          push  bx
	                          mov   dx,0
	                          mov   bx,240
	                          div   bx
	                          inc   dx
	                          mov   ax,dx
	                          pop   bx
	                          pop   dx
	                          ret
getrandomfrom1to240 endp


	;;;;;;;;;update coins/;;;;;;;;;;;;
updatecoins proc near

	                          mov   di,0
	                          mov   bx,coinsize
	                          mov   si,bx

	coinsfalling:             

	                          mov   bx,coiny[di]
	checkifsameyp1:           
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   checkifsameyp12
	                          jmp   checkforsecondplayer
	                         
	checkifsameyp12:          add   dx,50
	                          cmp   bx,dx
	                          jle   checkifsamexp11
	                          jmp   checkforsecondplayer

	checkifsamexp11:          
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   coinx[di],dx
	                          jge   checkifsamexp12
	                          jmp   checkforsecondplayer

	checkifsamexp12:          
	                          add   dx,30
	                          cmp   coinx[di],dx
	                          jle   incp1score
	                          jmp   checkforsecondplayer

	incp1score:               
	                          inc   score1
	                          jmp   newcoinsinitialization





	checkforsecondplayer:     

	                          mov   bx,coiny[di]
	checkifsameyp2:           
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   checkifsameyp22
	                          jmp   checkcoinsend

	checkifsameyp22:          add   dx,40
	                          cmp   bx,dx
	                          jle   checkifsamexp21
	                          jmp   checkcoinsend

	checkifsamexp21:          
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   coinx[di],dx
	                          jge   checkifsamexp22
	                          jmp   checkcoinsend

	checkifsamexp22:          
	                          add   dx,30
	                          cmp   coinx[di],dx
	                          jle   incp2score
	                          jmp   checkcoinsend

	incp2score:               
	                          inc   score2
	                          jmp   newcoinsinitialization


	returntocoinsfalling:     
	                          jmp   coinsfalling


	checkcoinsend:            
	                          cmp   bx,190
	                          jb    coninuefalling
	                          jmp   newcoinsinitialization

	coninuefalling:           
	                          mov   ax,coiny[di]
	                          add   ax,coinspeed
	                          mov   coiny[di],ax
	                          jmp   last

	newcoinsinitialization:   
	                          call  getrandom                  	;get random value           ;
	                          call  getrandomfrom1to20         	;get random value from 1 to 20
	                          mov   coiny[di],ax               	;put y of coin with random value

	                          call  getrandom                  	;get random value
	                          call  getrandomfrom1to60         	;get random value from 1 to 60
	                          add   ax,coinx[di]
	                          cmp   ax,290                     	;compare the new value of x with 300(end of screen width)
	                          jg    changex
	                          mov   coinx[di],ax
	                          jmp   last

	changex:                                                   	; if the new value of x greater than 300 will subtract number from 1 to 20
	                          call  getrandom
	                          call  getrandomfrom1to60
	                          mov   bx,ax
	                          sub   bx,ax
	                          mov   coinx[di],ax

	last:                     
	                          add   di,2
	                          dec   si
	                          jnz   returntocoinsfalling

	                          RET
updatecoins ENDP


updatepowerups proc near

	                          mov   bl,ishealth
	                          cmp   bl,1
	                          jne   gotonext

	healthfalling:            

	                          mov   bx,healthpowery
	checksameyp1:             
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   checksameyp12
	                          jmp   checkhealthsecondplayer

	checksameyp12:            add   dx,50
	                          cmp   bx,dx
	                          jle   checksamexp11
	                          jmp   checkhealthsecondplayer

	checksamexp11:            
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   healthpowerx,dx
	                          jge   checksamexp12
	                          jmp   checkhealthsecondplayer

	checksamexp12:            
	                          add   dx,30
	                          cmp   healthpowerx,dx
	                          jle   incp1health
	                          jmp   checkhealthsecondplayer

	incp1health:              
	                          mov   bx,PLayer1Health
	                          cmp   bx,100
	                          je    healthconinuefalling
	                          add   PLayer1Health,5
	                          jmp   clearHealthatend


	gotonext:                 
	                          jmp   startupdatingspeed


	checkhealthsecondplayer:  

	                          mov   bx,healthpowery
	checksameyp2:             
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   checksameyp22
	                          jmp   checkhealthend

	checksameyp22:            add   dx,40
	                          cmp   bx,dx
	                          jle   checksamexp21
	                          jmp   checkhealthend

	checksamexp21:            
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   healthpowerx,dx
	                          jge   checksamexp22
	                          jmp   checkhealthend

	checksamexp22:            
	                          add   dx,30
	                          cmp   healthpowerx,dx
	                          jle   incp2health
	                          jmp   checkhealthend

	incp2health:              mov   bx,PLayer2Health
	                          cmp   bx,310
	                          jge   healthconinuefalling
	                          add   PLayer2Health,5
	                          jmp   clearHealthatend


	

	checkhealthend:           
	                          mov   bx,healthpowery
	                          cmp   bx,180
	                          jb    healthconinuefalling

	clearhealthatend:         
	                          mov   bl,0
	                          mov   ishealth,bl
	                          call  clearHealth
	                          jmp   startupdatingspeed

	healthconinuefalling:     
	                          mov   ax,healthpowery
	                          add   ax,powerupspeed
	                          mov   healthpowery,ax
	                          jmp   startupdatingspeed

	startupdatingspeed:       
	                          mov   bl,isspeed
	                          cmp   bl,1
	                          jne   gotonext1

	speedfalling:             

	                          mov   bx,speedpowery
speed@checksameyp1:
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   speed@checksameyp12
	                          jmp   checkspeedsecondplayer

speed@checksameyp12:
	                          add   dx,50
	                          cmp   bx,dx
	                          jle   speed@checksamexp11
	                          jmp   checkspeedsecondplayer

speed@checksamexp11:
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   speedpowerx,dx
	                          jge   speed@checksamexp12
	                          jmp   checkspeedsecondplayer

speed@checksamexp12:
	                          add   dx,30
	                          cmp   speedpowerx,dx
	                          jle   checkactivespeed
	                          jmp   checkspeedsecondplayer

	checkactivespeed:         
	                          mov   ax,p1speedtimer
	                          cmp   ax,'0'
	                          je    incp1speed
	                          jmp   checkspeedsecondplayer
	incp1speed:               
	                          mov   bx,PLayer1velocity
	                          add   player1velocity,bx
	                          mov   ax,'9'
	                          mov   p1speedtimer, ax
	                          jmp   clearspeedatend


	gotonext1:                
	                          jmp   startupdatingdamage


	checkspeedsecondplayer:   

	                          mov   bx,speedpowery
speed@checksameyp2:
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   speed@checksameyp22
	                          jmp   checkspeedend
speed@checksameyp22:
	                          add   dx,40
	                          cmp   bx,dx
	                          jle   speed@checksamexp21
	                          jmp   checkspeedend
speed@checksamexp21:
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   speedpowerx,dx
	                          jge   speed@checksamexp22
	                          jmp   checkspeedend
speed@checksamexp22:
	                          add   dx,30
	                          cmp   speedpowerx,dx
	                          jle   checkp2activespeed
	                          jmp   checkspeedend

	checkp2activespeed:       
	                          mov   ax,p2speedtimer
	                          cmp   ax,'0'
	                          je    incp2speed
	                          jmp   checkspeedend
	

	incp2speed:               mov   bx,player2velocity
	                          add   player2velocity,bx
	                          mov   ax,'9'
	                          mov   p2speedtimer, ax
	                          jmp   clearspeedatend


	

	checkspeedend:            
	                          mov   bx,speedpowery
	                          cmp   bx,190
	                          jb    speedconinuefalling

	clearspeedatend:          
	                          mov   bl,0
	                          mov   isspeed,bl
	                          call  clearspeed
	                          jmp   startupdatingdamage

	speedconinuefalling:      
	                          mov   ax,speedpowery
	                          add   ax,powerupspeed
	                          mov   speedpowery,ax
	                          jmp   startupdatingdamage

	startupdatingdamage:      
	                          mov   bl,isdamage
	                          cmp   bl,1
	                          jne   gotonext2


	damagefalling:            
	                          mov   bx,damagepowery
		
damage@checksameyp1:
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   damage@checksameyp12
	                          jmp   checkdamagesecondplayer
damage@checksameyp12:
	                          add   dx,50
	                          cmp   bx,dx
	                          jle   damage@checksamexp11
	                          jmp   checkdamagesecondplayer

damage@checksamexp11:
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   damagepowerx,dx
	                          jge   damage@checksamexp12
	                          jmp   checkdamagesecondplayer

damage@checksamexp12:
	                          add   dx,30
	                          cmp   damagepowerx,dx
	                          jle   checkactivedamage
	                          jmp   checkdamagesecondplayer
	checkactivedamage:        
	                          mov   ax,p2damagetimer
	                          cmp   ax,'0'
	                          je    incp2damage
	                          jmp   checkdamagesecondplayer
	incp2damage:              
	                          mov   bx,p2damage
	                          add   p2damage,bx
	                          mov   ax,'9'
	                          mov   p2damagetimer, ax
	                          jmp   cleardamageatend


	gotonext2:                
	                          jmp   startupdatingfreeze

	checkdamagesecondplayer:  

damage@checksameyp2:
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   damage@checksameyp22
	                          jmp   checkdamageend

damage@checksameyp22:
	                          add   dx,40
	                          cmp   bx,dx
	                          jle   damage@checksamexp21
	                          jmp   checkdamageend

damage@checksamexp21:
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   damagepowerx,dx
	                          jge   damage@checksamexp22
	                          jmp   checkdamageend
damage@checksamexp22:
	                          add   dx,30
	                          cmp   damagepowerx,dx
	                          jle   checkactivedamage2
	                          jmp   checkdamageend


	checkactivedamage2:       
	                          mov   ax,p1damagetimer
	                          cmp   ax,'0'
	                          je    incp1damage
	                          jmp   checkdamageend

	incp1damage:              
	                          mov   bx,p1damage
	                          add   p1damage,bx
	                          mov   ax,'9'
	                          mov   p1damagetimer,ax
	                          jmp   cleardamageatend

	checkdamageend:           
	                          mov   bx,damagepowery
	                          cmp   bx,190
	                          jb    damageconinuefalling

	cleardamageatend:         
	                          mov   bl,0
	                          mov   isdamage,bl
	                          call  cleardamage
	                          jmp   startupdatingfreeze
	damageconinuefalling:     
	                          mov   ax,damagepowery
	                          add   ax,powerupspeed
	                          mov   damagepowery,ax
	                          jmp   startupdatingfreeze




	startupdatingfreeze:      
	                          mov   bl,isfreeze
	                          cmp   bl,1
	                          jne   startupdatingdecscore


	freezefalling:            
	                          mov   bx,freezepowery
		
freeze@checksameyp1:
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   freeze@checksameyp12
	                          jmp   checkfreezesecondplayer

freeze@checksameyp12:
	                          add   dx,50
	                          cmp   bx,dx
	                          jle   freeze@checksamexp11
	                          jmp   checkfreezesecondplayer
freeze@checksamexp11:
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   freezepowerx,dx
	                          jge   freeze@checksamexp12
	                          jmp   checkfreezesecondplayer

freeze@checksamexp12:
	                          add   dx,30
	                          cmp   freezepowerx,dx
	                          jle   checkactivefreeze
	                          jmp   checkfreezesecondplayer
	checkactivefreeze:        
	                          mov   ax,p2freezetimer
	                          cmp   ax,'0'
	                          je    activatep2freeze
	                          jmp   checkfreezesecondplayer
	activatep2freeze:         
	                          mov   bx,0
	                          mov   player2velocity,bx
	                          mov   bl,1
	                          mov   p2isfreezed,bl
	                          mov   ax,'6'
	                          mov   p2freezetimer, ax
	                          jmp   clearfreezeatend


	checkfreezesecondplayer:  

freeze@checksameyp2:
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   freeze@checksameyp22
	                          jmp   checkfreezeend

freeze@checksameyp22:
	                          add   dx,40
	                          cmp   bx,dx
	                          jle   freeze@checksamexp21
	                          jmp   checkfreezeend
freeze@checksamexp21:
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   freezepowerx,dx
	                          jge   freeze@checksamexp22
	                          jmp   checkfreezeend
freeze@checksamexp22:
	                          add   dx,30
	                          cmp   freezepowerx,dx
	                          jle   checkactivefreeze2
	                          jmp   checkfreezeend


	checkactivefreeze2:       
	                          mov   ax,p1freezetimer
	                          cmp   ax,'0'
	                          je    activatep1freeze
	                          jmp   checkfreezeend

	activatep1freeze:         
	                          mov   bx,0
	                          mov   player1velocity,bx
	                          mov   ax,'6'
	                          mov   bl,1
	                          mov   p1isfreezed,bl
	                          mov   p1freezetimer,ax
	                          jmp   clearfreezeatend

	checkfreezeend:           
	                          mov   bx,freezepowery
	                          cmp   bx,190
	                          jb    freezeconinuefalling

	clearfreezeatend:         
	                          mov   bl,0
	                          mov   isfreeze,bl
	                          call  cleardamage
	                          jmp   startupdatingdecscore
	freezeconinuefalling:     
	                          mov   ax,freezepowery
	                          add   ax,powerupspeed
	                          mov   freezepowery,ax
	                          jmp   startupdatingdecscore



	startupdatingdecscore:    
	                          mov   bl,isdecscore
	                          cmp   bl,1
	                          jne   endpowerupsupdating

	decscorefalling:          
	                          mov   bx,decscorepowery

decscore@checksameyp1:
	                          mov   dx,player1y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   decscore@checksameyp12
	                          jmp   checkdecscoresecondplayer
decscore@checksameyp12:
	                          
	                          add   dx,50
	                          cmp   bx,dx
	                          jle   decscore@checksamexp11
	                          jmp   checkdecscoresecondplayer

decscore@checksamexp11:
	                          mov   dx,player1x
	                          add   dx,60
	                          cmp   decscorepowerx,dx
	                          jge   decscore@checksamexp12
	                          jmp   checkdecscoresecondplayer


decscore@checksamexp12:
	                          add   dx,30
	                          cmp   decscorepowerx,dx
	                          jle   activatep2decscore
	                          jmp   checkdecscoresecondplayer

	activatep2decscore:       
	                          mov   bx,10
	                          cmp   bx,score2
	                          jge   setscore2with0
	                          sub   score2,bx
	                          jmp   cleardecscoreatend
	setscore2with0:           
	                          mov   score2,0
	                          jmp   cleardecscoreatend

	checkdecscoresecondplayer:

decscore@checksameyp2:
	                          mov   dx,player2y
	                          sub   dx,200
	                          cmp   bx,dx
	                          jge   decscore@checksameyp22
	                          jmp   checkdecscoreend
decscore@checksameyp22:
	                          add   dx,40
	                          cmp   bx,dx
	                          jle   decscore@checksamexp21
	                          jmp   checkdecscoreend
decscore@checksamexp21:
	                          mov   dx,player2x
	                          add   dx,60
	                          cmp   decscorepowerx,dx
	                          jge   decscore@checksamexp22
	                          jmp   checkdecscoreend
decscore@checksamexp22:
	                          add   dx,30
	                          cmp   decscorepowerx,dx
	                          jle   activatep1decscore
	                          jmp   checkdecscoreend
	activatep1decscore:       
	                          mov   bx,10
	                          cmp   bx,score1
	                          jge   setscore1with0
	                          sub   score1,bx
	                          jmp   cleardecscoreatend
	setscore1with0:           
	                          mov   score1,0
	                          jmp   cleardecscoreatend

	checkdecscoreend:         
	                          mov   bx,decscorepowery
	                          cmp   bx,190
	                          jb    decscoreconinuefalling

	cleardecscoreatend:       
	                          mov   bl,0
	                          mov   isdecscore,bl
	                          call  cleardecscore
	                          jmp   endpowerupsupdating
	decscoreconinuefalling:   
	                          mov   ax,decscorepowery
	                          add   ax,powerupspeed
	                          mov   decscorepowery,ax
	                          jmp   endpowerupsupdating
	
	
	
	
	
	endpowerupsupdating:      
	
	                          RET

updatepowerups ENDP


Initializepowerups proc near
            
							
	checkhealth:              mov   ax,timer
	                          mov   bx,10
	                          mov   dx,0
	                          div   bx
	                          cmp   dx,0
	                          jne   checkspeed

	                          mov   al,ishealth
	                          cmp   al,1
	                          je    checkspeed


	                          mov   al,1
	                          mov   ishealth,al

	                          call  getrandom
	                          call  getrandomfrom1to240
	                          mov   healthpowerx,ax
	                          mov   healthpowery,1

	checkspeed:               
	                          mov   ax, timer
	                          mov   bx,15
	                          mov   dx,0
	                          div   bx
	                          cmp   dx,0
	                          jne   checkdamage

	                          mov   al,isspeed
	                          cmp   al,1
	                          je    checkdamage


	                          mov   al,1
	                          mov   isspeed,al

	                          call  getrandom
	                          call  getrandomfrom1to240
	                          mov   speedpowerx,ax
	                          mov   speedpowery,1
	checkdamage:              
	                          mov   ax, timer
	                          mov   bx,20
	                          mov   dx,0
	                          div   bx
	                          cmp   dx,0
	                          jne   checkfreeze

	                          mov   bl,roundnum
	                          cmp   bl,'3'
	                          jne   checkfreeze
	                          mov   al,isdamage
	                          cmp   al,1
	                          je    checkfreeze


	                          mov   al,1
	                          mov   isdamage,al

	                          call  getrandom
	                          call  getrandomfrom1to240
	                          mov   damagepowerx,ax
	                          mov   damagepowery,1

	checkfreeze:              
	                          mov   ax, timer
	                          mov   bx,7
	                          mov   dx,0
	                          div   bx
	                          cmp   dx,0
	                          jne   checkdecscore
							  
	                          mov   bl,roundnum
	                          cmp   bl,'2'
	                          jne   checkdecscore
	                          mov   al,isfreeze
	                          cmp   al,1
	                          je    checkdecscore


	                          mov   al,1
	                          mov   isfreeze,al

	                          call  getrandom
	                          call  getrandomfrom1to240
	                          mov   freezepowerx,ax
	                          mov   freezepowery,1

	checkdecscore:            
	                          mov   ax,timer
	                          mov   bx,12
	                          mov   dx,0
	                          div   bx
	                          cmp   dx,0
	                          jne   endcheck

	                          mov   al,isdecscore
	                          cmp   al,1
	                          je    endcheck


	                          mov   al,1
	                          mov   isdecscore,al

	                          call  getrandom
	                          call  getrandomfrom1to240
	                          mov   decscorepowerx,ax
	                          mov   decscorepowery,1


	endcheck:                 RET
Initializepowerups endp

	;;;;;;;;;;;;;;;DINA;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;player catch coin;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;mov coinsx1,ax
	;mov dx,coiny[di]
	;mov coinsy1,dx
	;;;;;;;; clear player 1 ;;;;;;;;;;

clearplayer1 proc near

	                          mov   si,player1x
	                          mov   di,player1y
	                          add   si,p1w
	                          add   di,p1h
	                          mov   cx, player1x
	                          mov   dx, player1y
	                          mov   ah,0ch
	                          mov   al,00h
	clearp1row:               
	                          mov   dx,player1y

	clearp1col:               
	                          int   10h
	                          inc   dx
	                          cmp   dx, di
	                          jnz   clearp1col

	                          inc   cx
	                          cmp   cx, si
	                          jnz   clearp1row
	                          RET
clearplayer1 endp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;; clear player 2 ;;;;;;;;

clearplayer2 proc near

	                          mov   si,player2x
	                          mov   di,player2y
	                          add   si,p2w
	                          add   di,p2h
	                          mov   cx, player2x
	                          mov   dx, player2y
	                          mov   ah,0ch
	                          mov   al,00h
	clearp2row:               
	                          mov   dx,player2y

	clearp2col:               
	                          int   10h
	                          inc   dx
	                          cmp   dx, di
	                          jnz   clearp2col

	                          inc   cx
	                          cmp   cx, si
	                          jnz   clearp2row

	                          RET
clearplayer2 endp

	;;;;;;;;;;;;clear fireball1;;;;;;;;;;;;;
	;description
clearfireball1 PROC
	                          mov   si,fireball1x
	                          mov   di,fireball1y

	                          add   si,fireball1W
	                          add   di,fireball1H

	                          mov   cx, fireball1x
	                          mov   dx, fireball1y
	                          mov   ah,0ch
	                          mov   al,00h

	clearfireball1col:        

	                          mov   dx,fireball1y
	clearfireball1row:        
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearfireball1row

	                          inc   cx
	                          cmp   cx,si

	                          jnz   clearfireball1col

	                          ret
clearfireball1 ENDP


clearfireball2 PROC
	                          mov   si,fireball2x
	                          mov   di,fireball2y

	                          add   si,fireball2W
	                          add   di,fireball2H

	                          mov   cx, fireball2x
	                          mov   dx, fireball2y
	                          mov   ah,0ch
	                          mov   al,00h

	clearfireball2col:        

	                          mov   dx,fireball2y
	clearfireball2row:        
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearfireball2row

	                          inc   cx
	                          cmp   cx,si

	                          jnz   clearfireball2col

	                          ret
clearfireball2 ENDP
	;;;;;;;;;;;;;;;;;;;;;;;
	;DINA;
	;;;;;;;;;clear coins;;;;;;;;;;;
clearcoin proc near
	                          push  di
	                          push  cx
	                          push  dx
	                          push  ax
	                          push  bx
	                          push  si

	                          mov   si,coinsx1
	                          mov   di,coinsy1

	                          add   si,coinW
	                          add   di,coinH

	                          mov   cx, coinsx1
	                          mov   dx, coinsy1
	                          mov   ah,0ch
	                          mov   al,00h

	clearcoincol:             

	                          mov   dx,coinsy1
	clearcoinrow:             
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearcoinrow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   clearcoincol


	                          pop   si
	                          pop   bx
	                          pop   ax
	                          pop   dx
	                          pop   cx
	                          pop   di

	                          RET
clearcoin ENDP
	;DINA
	;;;;;;;;;;;;clear each coin;;;;;;;;;;
cleareachcoin proc near
	                          push  ax
	                          push  bx
	                          push  cx
	                          push  dx
	                          push  di
	                          push  si

	                          mov   bx,coinsize
	                          mov   si,bx
	                          mov   di,0
	cleareach:                
	                          mov   ax,coinx[di]
	                          mov   coinsx1,ax
	                          mov   bx,coiny[di]
	                          mov   coinsy1,bx
	                          call  clearcoin
	                          add   di,2d
	                          dec   si
	                          jnz   cleareach


	                          pop   si
	                          pop   di
	                          pop   dx
	                          pop   cx
	                          pop   bx
	                          pop   ax

	                          RET
cleareachcoin ENDP

clearicon proc near
	                          push  si
	                          push  di
	                          push  cx
	                          push  dx
	                          push  ax
	                          mov   si,iconx
	                          mov   di,icony

	                          add   si,iconW
	                          add   di,iconH

	                          mov   cx, iconx
	                          mov   dx, icony
	                          mov   ah,0ch
	                          mov   al,00h

	claericoncol:             

	                          mov   dx,icony
	cleariconrow:             
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   cleariconrow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claericoncol


	                          pop   ax
	                          pop   dx
	                          pop   cx
	                          pop   di
	                          pop   si
	                          RET
clearicon ENDP



clearHealth proc near

	                          mov   si,healthpowerx
	                          mov   di,healthpowery

	                          add   si,healthW
	                          add   di,healthH

	                          mov   cx, healthpowerx
	                          mov   dx, healthpowery
	                          mov   ah,0ch
	                          mov   al,00h

	claerHealthcol:           

	                          mov   dx,healthpowery
	clearHealthrow:           
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearHealthrow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claerHealthcol

	                          RET
clearHealth ENDP

cleardamage proc near

	                          mov   si,damagepowerx
	                          mov   di,damagepowery

	                          add   si,damageW
	                          add   di,damageH

	                          mov   cx, damagepowerx
	                          mov   dx, damagepowerx
	                          mov   ah,0ch
	                          mov   al,00h

	claerdamagecol:           

	                          mov   dx,damagepowery
	cleardamagerow:           
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   cleardamagerow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claerdamagecol

	                          RET
cleardamage ENDP

clearSpeed proc near

	                          mov   si,speedpowerx
	                          mov   di,speedpowery

	                          add   si,speedW
	                          add   di,speedH

	                          mov   cx, speedpowerx
	                          mov   dx, speedpowerx
	                          mov   ah,0ch
	                          mov   al,00h

	claerspeedcol:            

	                          mov   dx,speedpowery
	clearspeedrow:            
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearspeedrow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claerspeedcol

	                          RET
clearSpeed ENDP

clearfreeze proc near

	                          mov   si,freezepowerx
	                          mov   di,freezepowery

	                          add   si,freezeW
	                          add   di,freezeH

	                          mov   cx, freezepowerx
	                          mov   dx, freezepowerx
	                          mov   ah,0ch
	                          mov   al,00h

	claerfreezecol:           

	                          mov   dx,freezepowery
	clearfreezerow:           
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   clearfreezerow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claerfreezecol

	                          RET
clearfreeze ENDP


cleardecscore proc near

	                          mov   si,decscorepowerx
	                          mov   di,decscorepowery

	                          add   si,decscoreW
	                          add   di,decscoreH

	                          mov   cx, decscorepowerx
	                          mov   dx, decscorepowerx
	                          mov   ah,0ch
	                          mov   al,00h

	claerdecscorecol:         

	                          mov   dx,decscorepowery
	cleardecscorerow:         
	                          int   10h
	                          inc   dx
	                          cmp   dx,di
	                          jnz   cleardecscorerow

	                          inc   cx
	                          cmp   cx,si
	                          jnz   claerdecscorecol

	                          RET
cleardecscore ENDP





clearobjects proc near
	                          push  cx
	                          push  dx
	                          push  ax

	                          call  clearplayer1
	                          call  clearplayer2
	                          call  clearfireball1
	                          call  clearfireball2
	                          call  cleareachcoin
	                          call  clearHealth
	                          call  clearSpeed
	                          call  cleardamage
	                          call  clearfreeze
	                          call  cleardecscore
	                          pop   ax
	                          pop   dx
	                          pop   cx
	                          RET
clearobjects endp




terminateandgetwinner PROC
	              
	;compare the scores to know the winner
	                          mov   bl,player1roundswon
	                          cmp   bl,'2'
	                          je    player1winsgame
	                          mov   bl,player2roundswon
	                          cmp   bl,'2'
	                          je    player2winsgame
	                          jmp   endterminate
	                          
	player1winsgame:          call  transition
	                          Print 0,0,player1gamewin,75,0fh
	                          mov   bx,300D
	                          mov   player1y,bx
	                          mov   bx,60
	                          mov   player1x,bx
	                          call  DrawPlayer1
	                          jmp   endwinnerscreen

	player2winsgame:          call  transition
	                          Print 0,0,player2gamewin,75,0fh
	                          mov   bx,300D
	                          mov   player2y,bx
	                          mov   bx,60
	                          mov   player2x,bx
	                          call  DrawPlayer2
	                          jmp   endwinnerscreen
							  
	;Display the end game string

	endwinnerscreen:          mov   ah,01
	                          int   16h
	                          jz    endwinnerscreen
	                          mov   ah,0
	                          int   16h

	                          cmp   ax,spacekey
	                          jnz   returnmain
	                          mov   ax, 4c00h
	                          int   21h                        	;end the program
							 
	returnmain:               cmp   ax,enterkey
	                          jne   endwinnerscreen
	                          call  transition
	                          jmp   mainmenu
	endterminate:             
	                          Ret
terminateandgetwinner endp
getnameinput1 PROC
	;CAPTURE STRING FROM KEYBOARD.
	                          mov   ah, 0Ah                    	;SERVICE TO CAPTURE STRING FROM KEYBOARD.
	                          mov   dx, offset name1
	                          int   21h

	;DISPLAY STRING.
	                          mov   ah, 9                      	;SERVICE TO DISPLAY STRING.
	                          mov   dx, offset name1+2
	                          int   21h

	                          ret
getnameinput1 endp
getnameinput2 PROC
	;CAPTURE STRING FROM KEYBOARD.
	                          mov   ah, 0Ah                    	;SERVICE TO CAPTURE STRING FROM KEYBOARD.
	                          mov   dx, offset name2
	                          int   21h

	;DISPLAY STRING.
	                          mov   ah, 9                      	;SERVICE TO DISPLAY STRING.
	                          mov   dx, offset name2+2
	                          int   21h

	                          ret
getnameinput2 endp

getnamesandprint proc
	                          mov   ah,0
	                          mov   al,13h
	                          int   10h
	                          mov   ah,9
	                          mov   dx,offset getplayer1namemsg
	                          int   21h
	                          call  getnameinput1
	                          mov   ah,0
	                          mov   al,13h
	                          int   10h
	                          mov   ah,9
	                          mov   dx,offset getplayer2namemsg
	                          int   21h
	                          call  getnameinput2
	                          mov   ah,0
	                          mov   al,13h
	                          mov   bh,0
	                          int   10h
	                          ret
getnamesandprint endp


CheckforRoundend proc	near

	                          mov   bx,lives2
	                          cmp   bx,'0'
	                          jne   Checkp1killed
	                          jmp   player1winsround


	Checkp1killed:            
	                          mov   bx,lives1
	                          cmp   bx,'0'
	                          jne   checktimerend
	                          jmp   player2winsround


	checktimerend:            
	                          mov   bx,timer
	                          cmp   bx,0
	                          jne   CheckKilledend
	                          jmp   checkplayersscore

	checkplayersscore:        
	                          mov   bx,score1
	                          mov   ax,score2
	                          cmp   bx,ax
	                          jg    player1winsround
	                          jmp   player2winsround


	player1winsround:         
	                          call  transition
	                          Print 0,0,player1winsmsg,52,0fh

	                          mov   bx,300D
	                          mov   player1y,bx

	                          mov   bx,60
	                          mov   player1x,bx

	                          call  DrawPlayer1

	                          inc   player1roundswon
	                          inc   roundnum
	                          jmp   waitforcontinuekey


	player2winsround:         
	                          call  transition
	                          Print 0,0,player2winsmsg,52,0fh

	                          mov   bx,300D
	                          mov   player2y,bx

	                          mov   bx,60
	                          mov   player2x,bx

	                          call  DrawPlayer2


	                          inc   player2roundswon
	                          inc   roundnum
	                          jmp   waitforcontinuekey


	waitforcontinuekey:       call  flushkeybuffer
	                          mov   ah, 01
	                          int   16h
	                          JZ    waitforcontinuekey
	                          mov   ah,0
	                          int   16h
	                         
	                          call  flushkeybuffer
	                          call  transition
	                          call  Reintialize


	CheckKilledend:           
	                          RET
	                          endp  CheckforRoundend




ReIntialize proc near

	                          mov   bx,'3'
	                          mov   lives1,bx
	                          mov   lives2,bx
							  
	                          mov   bx,100
	                          mov   PLayer1Health,bx

	                          mov   bx,310
	                          mov   PLayer2Health,bx

	                          mov   bx,0
	                          mov   score1,bx
	                          mov   score2,bx


	                          mov   bx,-60D
	                          mov   player1x,bx

	                          mov   bx,300D
	                          mov   player1y,bx

	                          mov   bx,215D
	                          mov   player2x,bx

	                          mov   bx,300D
	                          mov   player2y,bx

	                          mov   bl,0
	                          mov   ishealth,bl
	                          mov   isspeed,bl
	                          mov   isdamage,bl
	                          mov   isfreeze,bl
	                          mov   isdecscore,bl
	                          mov   isfiring,bl
	                          mov   isfiring2,bl
	                          mov   p1hit,bl
	                          mov   p2hit,bl
	                          mov   p1isfreezed,bl
	                          mov   p2isfreezed,bl
	                          mov   input,bl
	                          mov   input2,bl

	                          mov   bx,20
	                          mov   p1damage,bx
	                          mov   p2damage,bx

	                          mov   bx,'0'
	                          mov   p1speedtimer,bx
	                          mov   p1damagetimer,bx
	                          mov   p1freezetimer,bx
	                          mov   p2speedtimer,bx
	                          mov   p2damagetimer,bx
	                          mov   p2freezetimer,bx

	                          mov   bx,100
	                          mov   timer,bx




	                          RET
	                          endp  ReIntialize

DrawLine proc

	;   mov ah,6
	;     mov al,1
	;     mov bh,7
	;     mov cx,0
	;     mov dh,12
	;     mov dl,79
	;     int 10h
	                
	               

	                          mov   ah,0
	                          mov   al,13H
	                          int   10h
	;---------------------------
	                          mov   ah,9
	                          mov   dx,offset name1+2          	;display the name of player 1
	                          int   21h
	;set the cursor position
	                          mov   ah,2
	                          mov   dh,13
	                          mov   dl,0
	                          int   10h
	;display the name of player 2
	                          mov   ah,9
	                          mov   dx,offset name2+2          	;display the name of player 1
	                          int   21h
	;-------------------------

	;  mov  al,name1+1
	;  mov  MsgSendIndix,al
	;  mov  al,name2+1
	;  mov  ah,0
	;  mov  MsgReceivedIndix,ax

	                          mov   cx,0
	                          mov   dx,100
	                          mov   al,0fh
	                          mov   ah,0ch
	Draw:                     
	                          int   10h
	                          inc   cx
	                          cmp   cx,320
	                          jnz   Draw
                            
	                          ret
DrawLine endp



MsgSend proc
	                          mov   di,offset Msg              	;new massage
	                          add   di,MsgReceivedIndix        	;to put char after the last char written

	Loop1Send:                
	                          mov   dx , 3FDH
	Check:                    
	                          In    al , dx
	                          test  al ,00100000b
	                          JZ    Check
	                          mov   dx,3f8h
	                          mov   ah,0bh
	                          int   21h
	                          cmp   al,0
	                          je    Escape
	                          mov   dl,0
	                          mov   dh,NumMsgSent
	                          add   dl,MsgSendIndix
	                          mov   ah,2
	                          int   10h
	                          mov   ah,1
	                          int   21h
	                          mov   dx , 3F8H
	                          out   dx , al
	                          inc   MsgSendIndix
	                          cmp   MsgSendIndix,39            	;---------------------------------
	                          je    here
	back:                     cmp   al,1bh
	                          je    Escape                     	;if esc is pressed end program
	                          cmp   al,08h
	                          je    BackSpace                  	;if backspace is pressed
	                          cmp   al,0dh
	                          jne   Escape

	                          mov   dl,0
	                          mov   dh,NumMsgSent              	;to move in correct Y pos
	                          mov   ah,2
	                          int   10h

	                          mov   MsgSendIndix,0
	                          inc   NumMsgSent
	                          cmp   NumMsgSent,11
	                          jne   Escape
	;clear screen
	                          mov   si,320
	                          mov   di,100
	                          mov   cx, 0
	                          mov   ah,0ch
	                          mov   al,00h
	Clear:                    
	                          mov   dx,8

	Clear2:                   
	                          int   10h
	                          inc   dx
	                          cmp   dx, di
	                          jnz   Clear2

	                          inc   cx
	                          cmp   cx, si
	                          jnz   Clear
	                          mov   NumMsgSent,1

	Escape:                   
	                          ret
	; here:            dec  MsgSendIndix
	;                  jmp  Check
	here:                     dec   MsgSendIndix
	;sub  MsgReceivedIndix,2
	                          jmp   back
	; mov  MsgSendIndix,0
	;add  NumMsgSent,1
	                 
	                 


	BackSpace:                
	                          mov   ah,2
	                          mov   dl,''
	                          int   21h
	                          sub   MsgSendIndix,1
	                          cmp   MsgSendIndix,0
	                          je    Escape
	                          sub   MsgSendIndix,1
	                          jmp   Escape


MsgSend endp







MsgRec proc
	;char input
	;check that the regester is ready to receive char
	loop1Received:            
	                          mov   dx,3FDH                    	; Line Status Register
	                          in    al,dx
	                          test  al,1
	                          JZ    Escape2                    	;if not ready jumb

	                          mov   dx , 03F8H
	                          in    al , dx
	                          cmp   al,1bh
	                          je    Escape2                    	;if Esc is pressed end program
	                          cmp   al,0dh
	                          je    SendMsgAndDown             	;if enter is pressed send message go down one line
	                          cmp   al,08h
	                          je    Erase                      	;if backspace is pressed delete last character by dec [MsgReceived]
	                          mov   [di] , al
	                          inc   MsgReceivedIndix
	                          cmp   MsgReceivedIndix,39
	                          je    here2
	back2:                    jmp   loop1Received

	Escape2:                  
	                          ret

	Erase:                                                     	;mov  ah,2
	;  mov  dl,'.'
	;  int  21h
	                          cmp   MsgReceivedIndix,0
	                          je    loop1Received
	                          mov   [di], " "
	                          dec   di
	                          mov   [di]," "
	                          sub   MsgReceivedIndix,1
	                          jmp   loop1Received


	here2:                    dec   MsgReceivedIndix
	                          jmp   back2


	SendMsgAndDown:           
	;set cursor
	                          mov   ah,02
	                          mov   dh,13
	                          add   dh,NumMsgRecived
	                          mov   dl,0
	                          int   10h
	                          mov   ah,9
	                          mov   dx, offset msg
	                          int   21h
	                          inc   NumMsgRecived
	                          cmp   NumMsgRecived,11
	                          jne   cont
	;clear screen
	                          mov   si,320
	                          mov   di,200
	                          mov   cx, 0
	                          mov   ah,0ch
	                          mov   al,00h
	Clear3:                   
	                          mov   dx,112

	Clear4:                   
	                          int   10h
	                          inc   dx
	                          cmp   dx, di
	                          jnz   Clear4

	                          inc   cx
	                          cmp   cx, si
	                          jnz   Clear3

	                          mov   NumMsgRecived,1
	cont:                     
	                          mov   MsgReceivedIndix,0
	                          mov   cx,39
	                          mov   si,offset msg
	NewMsg:                   
	                          mov   [si], " "
	                          inc   si
	                          loop  NewMsg
	                          jmp   loop1Received
MsgRec endp


End main


